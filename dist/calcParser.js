/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calc = (function(){
    var parser = {trace: function trace(){},
        yy: {},
        symbols_: {"error":2,"expressions":3,"sentences":4,"EOF":5,"sentence":6,"consoleLog":7,";":8,"breakControl":9,"continueControl":10,"ifControl":11,"letDeclarations":12,"asigna":13,"e":14,"increment":15,"+=":16,"-=":17,"*=":18,"/=":19,"%=":20,"++":21,"--":22,"varType":23,"NUMBER_TYPE":24,"STRING_TYPE":25,"BOOLEAN_TYPE":26,"ANY_TYPE":27,"IDENTIFIER":28,"ARRAY_TYPE":29,"<":30,">":31,"corchetes":32,"[":33,"]":34,"LET":35,"idList":36,":":37,"=":38,"CONST":39,",":40,"console.log":41,"(":42,")":43,"break":44,"continue":45,"if":46,"ifBody":47,"else":48,"{":49,"}":50,"+":51,"-":52,"*":53,"/":54,"%":55,"^":56,"==":57,"!=":58,">=":59,"<=":60,"||":61,"&&":62,"!":63,"eList":64,"?":65,".":66,"NUMBER":67,"STRING":68,"NULL":69,"UNDEFINED":70,"FALSE":71,"TRUE":72,"$accept":0,"$end":1},
        terminals_: {2:"error",5:"EOF",8:";",16:"+=",17:"-=",18:"*=",19:"/=",20:"%=",21:"++",22:"--",24:"NUMBER_TYPE",25:"STRING_TYPE",26:"BOOLEAN_TYPE",27:"ANY_TYPE",28:"IDENTIFIER",29:"ARRAY_TYPE",30:"<",31:">",33:"[",34:"]",35:"LET",37:":",38:"=",39:"CONST",40:",",41:"console.log",42:"(",43:")",44:"break",45:"continue",46:"if",48:"else",49:"{",50:"}",51:"+",52:"-",53:"*",54:"/",55:"%",56:"^",57:"==",58:"!=",59:">=",60:"<=",61:"||",62:"&&",63:"!",65:"?",66:".",67:"NUMBER",68:"STRING",69:"NULL",70:"UNDEFINED",71:"FALSE",72:"TRUE"},
        productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,2],[6,2],[6,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,2],[15,2],[23,1],[23,1],[23,1],[23,1],[23,1],[23,4],[32,3],[32,2],[12,6],[12,4],[12,4],[12,2],[12,6],[12,4],[12,7],[12,5],[12,7],[12,5],[36,3],[36,1],[13,3],[7,4],[9,1],[10,1],[11,5],[11,7],[11,7],[47,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,3],[14,2],[14,3],[14,2],[14,3],[14,4],[14,5],[14,5],[14,6],[14,3],[14,2],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[14,1],[64,3],[64,1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
        ) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:return $$[$0-1];
                    break;
                case 2: $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
                    break;
                case 3: this.$ = [$$[$0]];
                    break;
                case 4:this.$ = $$[$0-1];
                    break;
                case 5: this.$ = $$[$0-1];
                    break;
                case 6: this.$ = $$[$0-1];
                    break;
                case 7: this.$ = $$[$0];
                    break;
                case 8: this.$ = $$[$0-1];
                    break;
                case 9: this.$ = $$[$0-1];
                    break;
                case 10: this.$ = $$[$0-1];
                    break;
                case 11: this.$ = new ast.ReAsignAddNode($$[$0-2], $$[$0]);
                    break;
                case 12: this.$ = new ast.ReAsignSubNode($$[$0-2], $$[$0]);
                    break;
                case 13: this.$ = new ast.ReAsignMulNode($$[$0-2], $$[$0]);
                    break;
                case 14: this.$ = new ast.ReAsignDivNode($$[$0-2], $$[$0]);
                    break;
                case 15: this.$ = new ast.ReAsignModNode($$[$0-2], $$[$0]);
                    break;
                case 16: this.$ = new ast.ReAddNode($$[$0-1]);
                    break;
                case 17: this.$ = new ast.ReSubNode($$[$0-1]);
                    break;
                case 18: this.$ = $$[$0];
                    break;
                case 19: this.$ = $$[$0];
                    break;
                case 20: this.$ = $$[$0];
                    break;
                case 21: this.$ = $$[$0];
                    break;
                case 22: this.$ = $$[$0];
                    break;
                case 23: this.$ = $$[$0-3];
                    break;
                case 26:this.$ = new ast.DeclareVarListNode($$[$0-2], $$[$0-4], $$[$0]);
                    break;
                case 27: this.$ = new ast.DeclareVarListNode($$[$0], $$[$0-2]);
                    break;
                case 28: this.$ = new ast.DeclareVarListNode("", $$[$0-2], $$[$0]);
                    break;
                case 29:this.$ = new ast.DeclareVarListNode("", $$[$0]);
                    break;
                case 30:this.$ = new ast.DeclareVarListNode($$[$0-2], [new ast.DeclareVarNode($$[$0-4])], $$[$0], true);
                    break;
                case 31: this.$ = new ast.DeclareVarListNode("", [new ast.DeclareVarNode($$[$0-2])], $$[$0], true);
                    break;
                case 32:this.$ = new ast.DeclareVarListNode('ARRAY', $$[$0-5], $$[$0]);
                    break;
                case 33: this.$ = new ast.DeclareVarListNode('ARRAY', $$[$0-3]);
                    break;
                case 34:this.$ = new ast.DeclareVarListNode('ARRAY', [new ast.DeclareVarNode($$[$0-5])], $$[$0], true);
                    break;
                case 35: this.$ = new ast.DeclareVarListNode("", [new ast.DeclareVarNode($$[$0-3])], $$[$0], true);
                    break;
                case 36: $$[$0-2].push(new ast.DeclareVarNode($$[$0])); this.$ = $$[$0-2];
                    break;
                case 37: this.$ = [new ast.DeclareVarNode($$[$0])]
                    break;
                case 38: this.$ = new ast.AsignNode($$[$0-2], $$[$0]);
                    break;
                case 39: this.$ = new ast.ConsoleLogNode($$[$0-1]);
                    break;
                case 40: this.$ = new ast.BreakNode();
                    break;
                case 41: this.$ = new ast.ContinueNode();
                    break;
                case 42: this.$ = new ast.IfNode($$[$0-2], $$[$0], []);
                    break;
                case 43: this.$ = new ast.IfNode($$[$0-4], $$[$0-2], $$[$0]);
                    break;
                case 44: this.$ = new ast.IfNode($$[$0-4], $$[$0-2], [$$[$0]]);
                    break;
                case 45: this.$ = $$[$0-1];
                    break;
                case 46:this.$ = new ast.SumNode($$[$0-2],$$[$0]);
                    break;
                case 47:this.$ = new ast.SubNode($$[$0-2], $$[$0]);
                    break;
                case 48:this.$ = new ast.MulNode($$[$0-2],$$[$0]);
                    break;
                case 49:this.$ = new ast.DivNode($$[$0-2],$$[$0]);
                    break;
                case 50:this.$ = new ast.ModNode($$[$0-2],$$[$0]);
                    break;
                case 51:this.$ = new ast.ExpNode($$[$0-2], $$[$0]);
                    break;
                case 52:this.$ = new ast.EqNode($$[$0-2], $$[$0]);
                    break;
                case 53:this.$ = new ast.DifNode($$[$0-2], $$[$0]);
                    break;
                case 54:this.$ = new ast.HigherNode($$[$0-2], $$[$0]);
                    break;
                case 55:this.$ = new ast.HigherEqNode($$[$0-2], $$[$0]);
                    break;
                case 56:this.$ = new ast.MinorEqNode($$[$0-2], $$[$0]);
                    break;
                case 57:this.$ = new ast.MinorNode($$[$0-2], $$[$0]);
                    break;
                case 58:this.$ = new ast.OrNode($$[$0-2], $$[$0]);
                    break;
                case 59:this.$ = new ast.AndNode($$[$0-2], $$[$0]);
                    break;
                case 60:this.$ = new ast.NotNode($$[$0]);
                    break;
                case 61:this.$ = $$[$0-1];
                    break;
                case 62: this.$ = new ast.CreateArrayNode([]);
                    break;
                case 63: this.$ = new ast.CreateArrayNode($$[$0-1]);
                    break;
                case 64: this.$ = new ast.CreateArrVarNode($$[$0-3], $$[$0-1]);
                    break;
                case 65: this.$ = new ast.SentenceTernaryNode($$[$0-4], $$[$0-2], $$[$0]);
                    break;
                case 66: this.$ = new ast.CreateObjFunNode($$[$0-4], $$[$0-2], []);
                    break;
                case 67: this.$ = new ast.CreateObjFunNode($$[$0-5], $$[$0-3], $$[$0-1]);
                    break;
                case 68: this.$ = new ast.CreateObjVarNode($$[$0-2], $$[$0]);
                    break;
                case 69:this.$ = new ast.MulNode($$[$0], new ast.NumberNode(-1));
                    break;
                case 70: this.$ = $$[$0]
                    break;
                case 71:this.$ = new ast.NumberNode(Number(yytext));
                    break;
                case 72:this.$ = new ast.StringNode(yytext);
                    break;
                case 73: this.$ = new ast.NullNode();
                    break;
                case 74: this.$ = new ast.UndefinedNode();
                    break;
                case 75:this.$ = new ast.BooleanNode(false);
                    break;
                case 76:this.$ = new ast.BooleanNode(true);
                    break;
                case 77: this.$ = new ast.CreateIdVarNode($$[$0]);
                    break;
                case 78:$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
                    break;
                case 79:this.$ = [$$[$0]]
                    break;
            }
        },
        table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:21,28:[1,28],33:[1,19],35:[1,15],39:[1,16],41:[1,11],42:[1,18],44:[1,12],45:[1,13],46:[1,14],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{1:[3]},{5:[1,29],6:30,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:21,28:[1,28],33:[1,19],35:[1,15],39:[1,16],41:[1,11],42:[1,18],44:[1,12],45:[1,13],46:[1,14],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{5:[2,3],28:[2,3],33:[2,3],35:[2,3],39:[2,3],41:[2,3],42:[2,3],44:[2,3],45:[2,3],46:[2,3],50:[2,3],52:[2,3],63:[2,3],67:[2,3],68:[2,3],69:[2,3],70:[2,3],71:[2,3],72:[2,3]},{8:[1,31]},{8:[1,32]},{8:[1,33]},{5:[2,7],28:[2,7],33:[2,7],35:[2,7],39:[2,7],41:[2,7],42:[2,7],44:[2,7],45:[2,7],46:[2,7],50:[2,7],52:[2,7],63:[2,7],67:[2,7],68:[2,7],69:[2,7],70:[2,7],71:[2,7],72:[2,7]},{8:[1,34]},{8:[1,35]},{8:[1,36],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],38:[1,37],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]},{42:[1,62]},{8:[2,40]},{8:[2,41]},{42:[1,63]},{28:[1,65],36:64},{28:[1,66]},{14:67,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:68,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:71,15:21,28:[1,28],33:[1,19],34:[1,69],42:[1,18],52:[1,20],63:[1,17],64:70,67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:72,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{8:[2,70],16:[2,70],17:[2,70],18:[2,70],19:[2,70],20:[2,70],21:[2,70],22:[2,70],30:[2,70],31:[2,70],33:[2,70],34:[2,70],37:[2,70],38:[2,70],40:[2,70],43:[2,70],51:[2,70],52:[2,70],53:[2,70],54:[2,70],55:[2,70],56:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],61:[2,70],62:[2,70],65:[2,70],66:[2,70]},{8:[2,71],16:[2,71],17:[2,71],18:[2,71],19:[2,71],20:[2,71],21:[2,71],22:[2,71],30:[2,71],31:[2,71],33:[2,71],34:[2,71],37:[2,71],38:[2,71],40:[2,71],43:[2,71],51:[2,71],52:[2,71],53:[2,71],54:[2,71],55:[2,71],56:[2,71],57:[2,71],58:[2,71],59:[2,71],60:[2,71],61:[2,71],62:[2,71],65:[2,71],66:[2,71]},{8:[2,72],16:[2,72],17:[2,72],18:[2,72],19:[2,72],20:[2,72],21:[2,72],22:[2,72],30:[2,72],31:[2,72],33:[2,72],34:[2,72],37:[2,72],38:[2,72],40:[2,72],43:[2,72],51:[2,72],52:[2,72],53:[2,72],54:[2,72],55:[2,72],56:[2,72],57:[2,72],58:[2,72],59:[2,72],60:[2,72],61:[2,72],62:[2,72],65:[2,72],66:[2,72]},{8:[2,73],16:[2,73],17:[2,73],18:[2,73],19:[2,73],20:[2,73],21:[2,73],22:[2,73],30:[2,73],31:[2,73],33:[2,73],34:[2,73],37:[2,73],38:[2,73],40:[2,73],43:[2,73],51:[2,73],52:[2,73],53:[2,73],54:[2,73],55:[2,73],56:[2,73],57:[2,73],58:[2,73],59:[2,73],60:[2,73],61:[2,73],62:[2,73],65:[2,73],66:[2,73]},{8:[2,74],16:[2,74],17:[2,74],18:[2,74],19:[2,74],20:[2,74],21:[2,74],22:[2,74],30:[2,74],31:[2,74],33:[2,74],34:[2,74],37:[2,74],38:[2,74],40:[2,74],43:[2,74],51:[2,74],52:[2,74],53:[2,74],54:[2,74],55:[2,74],56:[2,74],57:[2,74],58:[2,74],59:[2,74],60:[2,74],61:[2,74],62:[2,74],65:[2,74],66:[2,74]},{8:[2,75],16:[2,75],17:[2,75],18:[2,75],19:[2,75],20:[2,75],21:[2,75],22:[2,75],30:[2,75],31:[2,75],33:[2,75],34:[2,75],37:[2,75],38:[2,75],40:[2,75],43:[2,75],51:[2,75],52:[2,75],53:[2,75],54:[2,75],55:[2,75],56:[2,75],57:[2,75],58:[2,75],59:[2,75],60:[2,75],61:[2,75],62:[2,75],65:[2,75],66:[2,75]},{8:[2,76],16:[2,76],17:[2,76],18:[2,76],19:[2,76],20:[2,76],21:[2,76],22:[2,76],30:[2,76],31:[2,76],33:[2,76],34:[2,76],37:[2,76],38:[2,76],40:[2,76],43:[2,76],51:[2,76],52:[2,76],53:[2,76],54:[2,76],55:[2,76],56:[2,76],57:[2,76],58:[2,76],59:[2,76],60:[2,76],61:[2,76],62:[2,76],65:[2,76],66:[2,76]},{8:[2,77],16:[2,77],17:[2,77],18:[2,77],19:[2,77],20:[2,77],21:[2,77],22:[2,77],30:[2,77],31:[2,77],33:[2,77],34:[2,77],37:[2,77],38:[2,77],40:[2,77],43:[2,77],51:[2,77],52:[2,77],53:[2,77],54:[2,77],55:[2,77],56:[2,77],57:[2,77],58:[2,77],59:[2,77],60:[2,77],61:[2,77],62:[2,77],65:[2,77],66:[2,77]},{1:[2,1]},{5:[2,2],28:[2,2],33:[2,2],35:[2,2],39:[2,2],41:[2,2],42:[2,2],44:[2,2],45:[2,2],46:[2,2],50:[2,2],52:[2,2],63:[2,2],67:[2,2],68:[2,2],69:[2,2],70:[2,2],71:[2,2],72:[2,2]},{5:[2,4],28:[2,4],33:[2,4],35:[2,4],39:[2,4],41:[2,4],42:[2,4],44:[2,4],45:[2,4],46:[2,4],50:[2,4],52:[2,4],63:[2,4],67:[2,4],68:[2,4],69:[2,4],70:[2,4],71:[2,4],72:[2,4]},{5:[2,5],28:[2,5],33:[2,5],35:[2,5],39:[2,5],41:[2,5],42:[2,5],44:[2,5],45:[2,5],46:[2,5],50:[2,5],52:[2,5],63:[2,5],67:[2,5],68:[2,5],69:[2,5],70:[2,5],71:[2,5],72:[2,5]},{5:[2,6],28:[2,6],33:[2,6],35:[2,6],39:[2,6],41:[2,6],42:[2,6],44:[2,6],45:[2,6],46:[2,6],50:[2,6],52:[2,6],63:[2,6],67:[2,6],68:[2,6],69:[2,6],70:[2,6],71:[2,6],72:[2,6]},{5:[2,8],28:[2,8],33:[2,8],35:[2,8],39:[2,8],41:[2,8],42:[2,8],44:[2,8],45:[2,8],46:[2,8],50:[2,8],52:[2,8],63:[2,8],67:[2,8],68:[2,8],69:[2,8],70:[2,8],71:[2,8],72:[2,8]},{5:[2,9],28:[2,9],33:[2,9],35:[2,9],39:[2,9],41:[2,9],42:[2,9],44:[2,9],45:[2,9],46:[2,9],50:[2,9],52:[2,9],63:[2,9],67:[2,9],68:[2,9],69:[2,9],70:[2,9],71:[2,9],72:[2,9]},{5:[2,10],28:[2,10],33:[2,10],35:[2,10],39:[2,10],41:[2,10],42:[2,10],44:[2,10],45:[2,10],46:[2,10],50:[2,10],52:[2,10],63:[2,10],67:[2,10],68:[2,10],69:[2,10],70:[2,10],71:[2,10],72:[2,10]},{14:73,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:74,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:75,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:76,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:77,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:78,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:79,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:80,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:81,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:82,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:83,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:84,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:85,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:86,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:87,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:88,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:89,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{28:[1,90]},{14:91,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:92,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:93,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:94,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:95,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{8:[2,16],16:[2,16],17:[2,16],18:[2,16],19:[2,16],20:[2,16],21:[2,16],22:[2,16],30:[2,16],31:[2,16],33:[2,16],34:[2,16],37:[2,16],38:[2,16],40:[2,16],43:[2,16],51:[2,16],52:[2,16],53:[2,16],54:[2,16],55:[2,16],56:[2,16],57:[2,16],58:[2,16],59:[2,16],60:[2,16],61:[2,16],62:[2,16],65:[2,16],66:[2,16]},{8:[2,17],16:[2,17],17:[2,17],18:[2,17],19:[2,17],20:[2,17],21:[2,17],22:[2,17],30:[2,17],31:[2,17],33:[2,17],34:[2,17],37:[2,17],38:[2,17],40:[2,17],43:[2,17],51:[2,17],52:[2,17],53:[2,17],54:[2,17],55:[2,17],56:[2,17],57:[2,17],58:[2,17],59:[2,17],60:[2,17],61:[2,17],62:[2,17],65:[2,17],66:[2,17]},{14:96,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:97,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{8:[2,29],37:[1,98],38:[1,99],40:[1,100]},{8:[2,37],37:[2,37],38:[2,37],40:[2,37]},{32:103,33:[1,104],37:[1,101],38:[1,102]},{8:[2,60],16:[2,60],17:[2,60],18:[2,60],19:[2,60],20:[2,60],21:[1,60],22:[1,61],30:[2,60],31:[2,60],33:[1,52],34:[2,60],37:[2,60],38:[2,60],40:[2,60],43:[2,60],51:[2,60],52:[2,60],53:[2,60],54:[2,60],55:[2,60],56:[2,60],57:[2,60],58:[2,60],59:[2,60],60:[2,60],61:[2,60],62:[2,60],65:[2,60],66:[1,54]},{16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],43:[1,105],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]},{8:[2,62],16:[2,62],17:[2,62],18:[2,62],19:[2,62],20:[2,62],21:[2,62],22:[2,62],30:[2,62],31:[2,62],33:[2,62],34:[2,62],37:[2,62],38:[2,62],40:[2,62],43:[2,62],51:[2,62],52:[2,62],53:[2,62],54:[2,62],55:[2,62],56:[2,62],57:[2,62],58:[2,62],59:[2,62],60:[2,62],61:[2,62],62:[2,62],65:[2,62],66:[2,62]},{34:[1,106],40:[1,107]},{16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],34:[2,79],40:[2,79],43:[2,79],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]},{8:[2,69],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[2,69],31:[2,69],33:[1,52],34:[2,69],37:[2,69],38:[2,69],40:[2,69],43:[2,69],51:[2,69],52:[2,69],53:[2,69],54:[2,69],55:[2,69],56:[2,69],57:[2,69],58:[2,69],59:[2,69],60:[2,69],61:[2,69],62:[2,69],65:[2,69],66:[1,54]},{8:[2,38],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]},{8:[2,46],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[2,46],31:[2,46],33:[1,52],34:[2,46],37:[2,46],38:[2,46],40:[2,46],43:[2,46],51:[2,46],52:[2,46],53:[1,40],54:[1,41],55:[1,42],56:[2,46],57:[2,46],58:[2,46],59:[2,46],60:[2,46],61:[2,46],62:[2,46],65:[2,46],66:[1,54]},{8:[2,47],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[2,47],31:[2,47],33:[1,52],34:[2,47],37:[2,47],38:[2,47],40:[2,47],43:[2,47],51:[2,47],52:[2,47],53:[1,40],54:[1,41],55:[1,42],56:[2,47],57:[2,47],58:[2,47],59:[2,47],60:[2,47],61:[2,47],62:[2,47],65:[2,47],66:[1,54]},{8:[2,48],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[2,48],31:[2,48],33:[1,52],34:[2,48],37:[2,48],38:[2,48],40:[2,48],43:[2,48],51:[2,48],52:[2,48],53:[2,48],54:[2,48],55:[2,48],56:[2,48],57:[2,48],58:[2,48],59:[2,48],60:[2,48],61:[2,48],62:[2,48],65:[2,48],66:[1,54]},{8:[2,49],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[2,49],31:[2,49],33:[1,52],34:[2,49],37:[2,49],38:[2,49],40:[2,49],43:[2,49],51:[2,49],52:[2,49],53:[2,49],54:[2,49],55:[2,49],56:[2,49],57:[2,49],58:[2,49],59:[2,49],60:[2,49],61:[2,49],62:[2,49],65:[2,49],66:[1,54]},{8:[2,50],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[2,50],31:[2,50],33:[1,52],34:[2,50],37:[2,50],38:[2,50],40:[2,50],43:[2,50],51:[2,50],52:[2,50],53:[2,50],54:[2,50],55:[2,50],56:[2,50],57:[2,50],58:[2,50],59:[2,50],60:[2,50],61:[2,50],62:[2,50],65:[2,50],66:[1,54]},{8:[2,51],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],34:[2,51],37:[2,51],38:[2,51],40:[2,51],43:[2,51],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[2,51],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[2,51],62:[2,51],65:[2,51],66:[1,54]},{8:[2,52],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],34:[2,52],37:[2,52],38:[2,52],40:[2,52],43:[2,52],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[2,52],57:[2,52],58:[2,52],59:[1,47],60:[1,48],61:[2,52],62:[2,52],65:[2,52],66:[1,54]},{8:[2,53],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],34:[2,53],37:[2,53],38:[2,53],40:[2,53],43:[2,53],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[2,53],57:[2,53],58:[2,53],59:[1,47],60:[1,48],61:[2,53],62:[2,53],65:[2,53],66:[1,54]},{8:[2,54],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[2,54],31:[2,54],33:[1,52],34:[2,54],37:[2,54],38:[2,54],40:[2,54],43:[2,54],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[2,54],57:[2,54],58:[2,54],59:[2,54],60:[2,54],61:[2,54],62:[2,54],65:[2,54],66:[1,54]},{8:[2,55],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[2,55],31:[2,55],33:[1,52],34:[2,55],37:[2,55],38:[2,55],40:[2,55],43:[2,55],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[2,55],57:[2,55],58:[2,55],59:[2,55],60:[2,55],61:[2,55],62:[2,55],65:[2,55],66:[1,54]},{8:[2,56],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[2,56],31:[2,56],33:[1,52],34:[2,56],37:[2,56],38:[2,56],40:[2,56],43:[2,56],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[2,56],57:[2,56],58:[2,56],59:[2,56],60:[2,56],61:[2,56],62:[2,56],65:[2,56],66:[1,54]},{8:[2,57],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[2,57],31:[2,57],33:[1,52],34:[2,57],37:[2,57],38:[2,57],40:[2,57],43:[2,57],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[2,57],57:[2,57],58:[2,57],59:[2,57],60:[2,57],61:[2,57],62:[2,57],65:[2,57],66:[1,54]},{8:[2,58],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],34:[2,58],37:[2,58],38:[2,58],40:[2,58],43:[2,58],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[2,58],62:[1,51],65:[2,58],66:[1,54]},{8:[2,59],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],34:[2,59],37:[2,59],38:[2,59],40:[2,59],43:[2,59],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[2,59],62:[2,59],65:[2,59],66:[1,54]},{16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],34:[1,108],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]},{16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],37:[1,109],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]},{8:[2,68],16:[2,68],17:[2,68],18:[2,68],19:[2,68],20:[2,68],21:[2,68],22:[2,68],30:[2,68],31:[2,68],33:[2,68],34:[2,68],37:[2,68],38:[2,68],40:[2,68],42:[1,110],43:[2,68],51:[2,68],52:[2,68],53:[2,68],54:[2,68],55:[2,68],56:[2,68],57:[2,68],58:[2,68],59:[2,68],60:[2,68],61:[2,68],62:[2,68],65:[2,68],66:[2,68]},{8:[2,11],16:[2,11],17:[2,11],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[2,11],31:[2,11],33:[1,52],34:[2,11],37:[2,11],38:[2,11],40:[2,11],43:[2,11],51:[2,11],52:[2,11],53:[2,11],54:[2,11],55:[2,11],56:[2,11],57:[2,11],58:[2,11],59:[2,11],60:[2,11],61:[2,11],62:[2,11],65:[2,11],66:[1,54]},{8:[2,12],16:[2,12],17:[2,12],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[2,12],31:[2,12],33:[1,52],34:[2,12],37:[2,12],38:[2,12],40:[2,12],43:[2,12],51:[2,12],52:[2,12],53:[2,12],54:[2,12],55:[2,12],56:[2,12],57:[2,12],58:[2,12],59:[2,12],60:[2,12],61:[2,12],62:[2,12],65:[2,12],66:[1,54]},{8:[2,13],16:[2,13],17:[2,13],18:[2,13],19:[2,13],20:[2,13],21:[1,60],22:[1,61],30:[2,13],31:[2,13],33:[1,52],34:[2,13],37:[2,13],38:[2,13],40:[2,13],43:[2,13],51:[2,13],52:[2,13],53:[2,13],54:[2,13],55:[2,13],56:[2,13],57:[2,13],58:[2,13],59:[2,13],60:[2,13],61:[2,13],62:[2,13],65:[2,13],66:[1,54]},{8:[2,14],16:[2,14],17:[2,14],18:[2,14],19:[2,14],20:[2,14],21:[1,60],22:[1,61],30:[2,14],31:[2,14],33:[1,52],34:[2,14],37:[2,14],38:[2,14],40:[2,14],43:[2,14],51:[2,14],52:[2,14],53:[2,14],54:[2,14],55:[2,14],56:[2,14],57:[2,14],58:[2,14],59:[2,14],60:[2,14],61:[2,14],62:[2,14],65:[2,14],66:[1,54]},{8:[2,15],16:[2,15],17:[2,15],18:[2,15],19:[2,15],20:[2,15],21:[1,60],22:[1,61],30:[2,15],31:[2,15],33:[1,52],34:[2,15],37:[2,15],38:[2,15],40:[2,15],43:[2,15],51:[2,15],52:[2,15],53:[2,15],54:[2,15],55:[2,15],56:[2,15],57:[2,15],58:[2,15],59:[2,15],60:[2,15],61:[2,15],62:[2,15],65:[2,15],66:[1,54]},{16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],43:[1,111],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]},{16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],43:[1,112],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]},{23:113,24:[1,114],25:[1,115],26:[1,116],27:[1,117],28:[1,118],29:[1,119]},{14:120,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{28:[1,121]},{23:122,24:[1,114],25:[1,115],26:[1,116],27:[1,117],28:[1,118],29:[1,119]},{14:123,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{33:[1,125],38:[1,124]},{34:[1,126]},{8:[2,61],16:[2,61],17:[2,61],18:[2,61],19:[2,61],20:[2,61],21:[2,61],22:[2,61],30:[2,61],31:[2,61],33:[2,61],34:[2,61],37:[2,61],38:[2,61],40:[2,61],43:[2,61],51:[2,61],52:[2,61],53:[2,61],54:[2,61],55:[2,61],56:[2,61],57:[2,61],58:[2,61],59:[2,61],60:[2,61],61:[2,61],62:[2,61],65:[2,61],66:[2,61]},{8:[2,63],16:[2,63],17:[2,63],18:[2,63],19:[2,63],20:[2,63],21:[2,63],22:[2,63],30:[2,63],31:[2,63],33:[2,63],34:[2,63],37:[2,63],38:[2,63],40:[2,63],43:[2,63],51:[2,63],52:[2,63],53:[2,63],54:[2,63],55:[2,63],56:[2,63],57:[2,63],58:[2,63],59:[2,63],60:[2,63],61:[2,63],62:[2,63],65:[2,63],66:[2,63]},{14:127,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{8:[2,64],16:[2,64],17:[2,64],18:[2,64],19:[2,64],20:[2,64],21:[2,64],22:[2,64],30:[2,64],31:[2,64],33:[2,64],34:[2,64],37:[2,64],38:[2,64],40:[2,64],43:[2,64],51:[2,64],52:[2,64],53:[2,64],54:[2,64],55:[2,64],56:[2,64],57:[2,64],58:[2,64],59:[2,64],60:[2,64],61:[2,64],62:[2,64],65:[2,64],66:[2,64]},{14:128,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:71,15:21,28:[1,28],33:[1,19],42:[1,18],43:[1,129],52:[1,20],63:[1,17],64:130,67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{8:[2,39]},{47:131,49:[1,132]},{8:[2,27],32:134,33:[1,104],38:[1,133]},{8:[2,18],31:[2,18],33:[2,18],38:[2,18]},{8:[2,19],31:[2,19],33:[2,19],38:[2,19]},{8:[2,20],31:[2,20],33:[2,20],38:[2,20]},{8:[2,21],31:[2,21],33:[2,21],38:[2,21]},{8:[2,22],31:[2,22],33:[2,22],38:[2,22]},{30:[1,135]},{8:[2,28],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]},{8:[2,36],37:[2,36],38:[2,36],40:[2,36]},{32:137,33:[1,104],38:[1,136]},{8:[2,31],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]},{14:138,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{34:[1,139]},{8:[2,25],33:[2,25],38:[2,25]},{16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],34:[2,78],40:[2,78],43:[2,78],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]},{8:[2,65],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],34:[2,65],37:[2,65],38:[2,65],40:[2,65],43:[2,65],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]},{8:[2,66],16:[2,66],17:[2,66],18:[2,66],19:[2,66],20:[2,66],21:[2,66],22:[2,66],30:[2,66],31:[2,66],33:[2,66],34:[2,66],37:[2,66],38:[2,66],40:[2,66],43:[2,66],51:[2,66],52:[2,66],53:[2,66],54:[2,66],55:[2,66],56:[2,66],57:[2,66],58:[2,66],59:[2,66],60:[2,66],61:[2,66],62:[2,66],65:[2,66],66:[2,66]},{40:[1,107],43:[1,140]},{5:[2,42],28:[2,42],33:[2,42],35:[2,42],39:[2,42],41:[2,42],42:[2,42],44:[2,42],45:[2,42],46:[2,42],48:[1,141],50:[2,42],52:[2,42],63:[2,42],67:[2,42],68:[2,42],69:[2,42],70:[2,42],71:[2,42],72:[2,42]},{4:142,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:21,28:[1,28],33:[1,19],35:[1,15],39:[1,16],41:[1,11],42:[1,18],44:[1,12],45:[1,13],46:[1,14],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{14:143,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{8:[2,33],33:[1,125],38:[1,144]},{23:145,24:[1,114],25:[1,115],26:[1,116],27:[1,117],28:[1,118],29:[1,119]},{14:146,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{33:[1,125],38:[1,147]},{8:[2,35],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]},{8:[2,24],33:[2,24],38:[2,24]},{8:[2,67],16:[2,67],17:[2,67],18:[2,67],19:[2,67],20:[2,67],21:[2,67],22:[2,67],30:[2,67],31:[2,67],33:[2,67],34:[2,67],37:[2,67],38:[2,67],40:[2,67],43:[2,67],51:[2,67],52:[2,67],53:[2,67],54:[2,67],55:[2,67],56:[2,67],57:[2,67],58:[2,67],59:[2,67],60:[2,67],61:[2,67],62:[2,67],65:[2,67],66:[2,67]},{11:149,46:[1,14],47:148,49:[1,132]},{6:30,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:21,28:[1,28],33:[1,19],35:[1,15],39:[1,16],41:[1,11],42:[1,18],44:[1,12],45:[1,13],46:[1,14],50:[1,150],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{8:[2,26],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]},{14:151,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{31:[1,152]},{8:[2,30],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]},{14:153,15:21,28:[1,28],33:[1,19],42:[1,18],52:[1,20],63:[1,17],67:[1,22],68:[1,23],69:[1,24],70:[1,25],71:[1,26],72:[1,27]},{5:[2,43],28:[2,43],33:[2,43],35:[2,43],39:[2,43],41:[2,43],42:[2,43],44:[2,43],45:[2,43],46:[2,43],50:[2,43],52:[2,43],63:[2,43],67:[2,43],68:[2,43],69:[2,43],70:[2,43],71:[2,43],72:[2,43]},{5:[2,44],28:[2,44],33:[2,44],35:[2,44],39:[2,44],41:[2,44],42:[2,44],44:[2,44],45:[2,44],46:[2,44],50:[2,44],52:[2,44],63:[2,44],67:[2,44],68:[2,44],69:[2,44],70:[2,44],71:[2,44],72:[2,44]},{5:[2,45],28:[2,45],33:[2,45],35:[2,45],39:[2,45],41:[2,45],42:[2,45],44:[2,45],45:[2,45],46:[2,45],48:[2,45],50:[2,45],52:[2,45],63:[2,45],67:[2,45],68:[2,45],69:[2,45],70:[2,45],71:[2,45],72:[2,45]},{8:[2,32],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]},{8:[2,23],31:[2,23],33:[2,23],38:[2,23]},{8:[2,34],16:[1,55],17:[1,56],18:[1,57],19:[1,58],20:[1,59],21:[1,60],22:[1,61],30:[1,49],31:[1,46],33:[1,52],51:[1,38],52:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,47],60:[1,48],61:[1,50],62:[1,51],65:[1,53],66:[1,54]}],
        defaultActions: {12:[2,40],13:[2,41],29:[2,1],111:[2,39]},
        parseError: function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},
        parse: function parse(input) {
            var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            this.lexer.setInput(input);
            this.lexer.yy = this.yy;
            this.yy.lexer = this.lexer;
            this.yy.parser = this;
            if (typeof this.lexer.yylloc == 'undefined') {
                this.lexer.yylloc = {};
            }
            var yyloc = this.lexer.yylloc;
            lstack.push(yyloc);
            var ranges = this.lexer.options && this.lexer.options.ranges;
            if (typeof this.yy.parseError === 'function') {
                this.parseError = this.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            function lex() {
                var token;
                token = self.lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            }
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (this.lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: this.lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: this.lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(this.lexer.yytext);
                        lstack.push(this.lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = this.lexer.yyleng;
                            yytext = this.lexer.yytext;
                            yylineno = this.lexer.yylineno;
                            yyloc = this.lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            this.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }};
    /* generated by jison-lex 0.2.1 */
    var lexer = (function(){
        var lexer = {

            EOF:1,

            parseError:function parseError(str,hash){if(this.yy.parser){this.yy.parser.parseError(str,hash)}else{throw new Error(str)}},

// resets the lexer, sets new input
            setInput:function(input){this._input=input;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},

// consumes and returns one char from the input
            input:function(){var ch=this._input[0];this.yytext+=ch;this.yyleng++;this.offset++;this.match+=ch;this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return ch},

// unshifts one char (or a string) into the input
            unput:function(ch){var len=ch.length;var lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-len-1);this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(lines.length-1){this.yylineno-=lines.length-1}var r=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len};if(this.options.ranges){this.yylloc.range=[r[0],r[0]+this.yyleng-len]}this.yyleng=this.yytext.length;return this},

// When called from action, caches matched text and appends it on next action
            more:function(){this._more=true;return this},

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject:function(){if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},

// retain first n characters of the match
            less:function(n){this.unput(this.match.slice(n))},

// displays already matched input, i.e. for error messages
            pastInput:function(){var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},

// displays upcoming input, i.e. for error messages
            upcomingInput:function(){var next=this.match;if(next.length<20){next+=this._input.substr(0,20-next.length)}return(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},

// displays the character position where the lexing error occurred, i.e. for error messages
            showPosition:function(){var pre=this.pastInput();var c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},

// test the lexed token: return FALSE when not a match, otherwise return token
            test_match:function(match,indexed_rule){var token,lines,backup;if(this.options.backtrack_lexer){backup={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){backup.yylloc.range=this.yylloc.range.slice(0)}}lines=match[0].match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno+=lines.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length};this.yytext+=match[0];this.match+=match[0];this.matches=match;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(match[0].length);this.matched+=match[0];token=this.performAction.call(this,this.yy,this,indexed_rule,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(token){return token}else if(this._backtrack){for(var k in backup){this[k]=backup[k]}return false}return false},

// return next match in input
            next:function(){if(this.done){return this.EOF}if(!this._input){this.done=true}var token,match,tempMatch,index;if(!this._more){this.yytext="";this.match=""}var rules=this._currentRules();for(var i=0;i<rules.length;i++){tempMatch=this._input.match(this.rules[rules[i]]);if(tempMatch&&(!match||tempMatch[0].length>match[0].length)){match=tempMatch;index=i;if(this.options.backtrack_lexer){token=this.test_match(tempMatch,rules[i]);if(token!==false){return token}else if(this._backtrack){match=false;continue}else{return false}}else if(!this.options.flex){break}}}if(match){token=this.test_match(match,rules[index]);if(token!==false){return token}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},

// return next match that has a token
            lex:function lex(){var r=this.next();if(r){return r}else{return this.lex()}},

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin:function begin(condition){this.conditionStack.push(condition)},

// pop the previously active lexer condition state off the condition stack
            popState:function popState(){var n=this.conditionStack.length-1;if(n>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},

// produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules:function _currentRules(){if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState:function topState(n){n=this.conditionStack.length-1-Math.abs(n||0);if(n>=0){return this.conditionStack[n]}else{return"INITIAL"}},

// alias for begin(condition)
            pushState:function pushState(condition){this.begin(condition)},

// return the number of states currently on the stack
            stateStackSize:function stateStackSize(){return this.conditionStack.length},
            options: {},
            performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
            ) {

                var YYSTATE=YY_START;
                switch($avoiding_name_collisions) {
                    case 0:

                        this.begin('no joda man xD');

                        break;
                    case 1:

                        this.popState();

                        break;
                    case 2:/* skip comment content*/
                        break;
                    case 3:return 69;
                        break;
                    case 4:return 70;
                        break;
                    case 5:return 71;
                        break;
                    case 6:return 72;
                        break;
                    case 7:return 24;
                        break;
                    case 8:return 25;
                        break;
                    case 9:return 26;
                        break;
                    case 10:return 27;
                        break;
                    case 11:return 29;
                        break;
                    case 12:return 39;
                        break;
                    case 13:return 35;
                        break;
                    case 14:return 44;
                        break;
                    case 15:return 45;
                        break;
                    case 16:return 41;
                        break;
                    case 17:return 46;
                        break;
                    case 18:return 48;
                        break;
                    case 19:/* skip whitespace */
                        break;
                    case 20:return 67
                        break;
                    case 21:return 68;
                        break;
                    case 22:return 16
                        break;
                    case 23:return 17
                        break;
                    case 24:return 18
                        break;
                    case 25:return 19
                        break;
                    case 26:return 20
                        break;
                    case 27:return 21
                        break;
                    case 28:return 22
                        break;
                    case 29:return 53
                        break;
                    case 30:return 54
                        break;
                    case 31:return 52
                        break;
                    case 32:return 51
                        break;
                    case 33:return 56
                        break;
                    case 34:return 55
                        break;
                    case 35:return 42
                        break;
                    case 36:return 43
                        break;
                    case 37:return 8
                        break;
                    case 38:return 40
                        break;
                    case 39:return 37
                        break;
                    case 40:return 57
                        break;
                    case 41:return 58
                        break;
                    case 42:return 38
                        break;
                    case 43:return 59
                        break;
                    case 44:return 60
                        break;
                    case 45:return 31
                        break;
                    case 46:return 30
                        break;
                    case 47:return 61
                        break;
                    case 48:return 62
                        break;
                    case 49:return 63
                        break;
                    case 50:return 65
                        break;
                    case 51:return 66
                        break;
                    case 52:return 33
                        break;
                    case 53:return 34
                        break;
                    case 54:return 49
                        break;
                    case 55:return 50
                        break;
                    case 56:return 30
                        break;
                    case 57:return 31
                        break;
                    case 58:return 28;
                        break;
                    case 59:return 5
                        break;
                    case 60:return 'INVALID'
                        break;
                }
            },
            rules: [/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:null\b)/,/^(?:undefined\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:any\b)/,/^(?:array\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:console\.log\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:(("(([^"\\^'\\]|((\\[btnfr"'\\])))+)?")|('(([^"\\^'\\]|((\\[btnfr"'\\])))+)?')))/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\?)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:<)/,/^(?:>)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
            conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true},"INITIAL":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60],"inclusive":true}}
        };
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser () {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = parser;
    exports.Parser = parser.Parser;
    exports.parse = function () { return parser.parse.apply(parser, arguments); };
    exports.main = function commonjsMain(args){if(!args[1]){console.log("Usage: "+args[0]+" FILE");process.exit(1)}var source=require("fs").readFileSync(require("path").normalize(args[1]),"utf8");return exports.parser.parse(source)};
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}