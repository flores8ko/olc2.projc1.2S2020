/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calc = (function(){
    var parser = {trace: function trace(){},
        yy: {},
        symbols_: {"error":2,"expressions":3,"sentences":4,"EOF":5,"sentence":6,";":7,"consoleLog":8,"letDeclarations":9,"asigna":10,"increment":11,"e":12,"+=":13,"-=":14,"*=":15,"/=":16,"%=":17,"++":18,"--":19,"varType":20,"NUMBER_TYPE":21,"STRING_TYPE":22,"BOOLEAN_TYPE":23,"ANY_TYPE":24,"IDENTIFIER":25,"LET":26,"idList":27,":":28,"=":29,"CONST":30,",":31,"console.log":32,"(":33,")":34,"+":35,"-":36,"*":37,"/":38,"%":39,"^":40,"==":41,"!=":42,">":43,">=":44,"<=":45,"<":46,"||":47,"&&":48,"!":49,"NUMBER":50,"STRING":51,"NULL":52,"UNDEFINED":53,"FALSE":54,"TRUE":55,"$accept":0,"$end":1},
        terminals_: {2:"error",5:"EOF",7:";",13:"+=",14:"-=",15:"*=",16:"/=",17:"%=",18:"++",19:"--",21:"NUMBER_TYPE",22:"STRING_TYPE",23:"BOOLEAN_TYPE",24:"ANY_TYPE",25:"IDENTIFIER",26:"LET",28:":",29:"=",30:"CONST",31:",",32:"console.log",33:"(",34:")",35:"+",36:"-",37:"*",38:"/",39:"%",40:"^",41:"==",42:"!=",43:">",44:">=",45:"<=",46:"<",47:"||",48:"&&",49:"!",50:"NUMBER",51:"STRING",52:"NULL",53:"UNDEFINED",54:"FALSE",55:"TRUE"},
        productions_: [0,[3,2],[4,3],[4,2],[6,1],[6,1],[6,1],[6,2],[11,3],[11,3],[11,3],[11,3],[11,3],[11,2],[11,2],[20,1],[20,1],[20,1],[20,1],[20,1],[9,6],[9,4],[9,4],[9,2],[9,6],[9,4],[27,3],[27,1],[10,3],[8,4],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,3],[12,2],[12,3],[12,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
        ) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:return $$[$0-1];
                    break;
                case 2: $$[$0-2].push($$[$0-1]); this.$ = $$[$0-2];
                    break;
                case 3: this.$ = [$$[$0-1]];
                    break;
                case 4:this.$ = $$[$0];
                    break;
                case 5: this.$ = $$[$0];
                    break;
                case 6: this.$ = $$[$0];
                    break;
                case 7: this.$ = $$[$0-1];
                    break;
                case 8: this.$ = new ast.ReAsignAddNode($$[$0-2], $$[$0]);
                    break;
                case 9: this.$ = new ast.ReAsignSubNode($$[$0-2], $$[$0]);
                    break;
                case 10: this.$ = new ast.ReAsignMulNode($$[$0-2], $$[$0]);
                    break;
                case 11: this.$ = new ast.ReAsignDivNode($$[$0-2], $$[$0]);
                    break;
                case 12: this.$ = new ast.ReAsignModNode($$[$0-2], $$[$0]);
                    break;
                case 13: this.$ = new ast.ReAddNode($$[$0-1]);
                    break;
                case 14: this.$ = new ast.ReSubNode($$[$0-1]);
                    break;
                case 15: this.$ = $$[$0];
                    break;
                case 16: this.$ = $$[$0];
                    break;
                case 17: this.$ = $$[$0];
                    break;
                case 18: this.$ = $$[$0];
                    break;
                case 19: this.$ = $$[$0];
                    break;
                case 20:this.$ = new ast.DeclareVarListNode($$[$0-2], $$[$0-4], $$[$0]);
                    break;
                case 21: this.$ = new ast.DeclareVarListNode($$[$0], $$[$0-2]);
                    break;
                case 22: this.$ = new ast.DeclareVarListNode("", $$[$0-2], $$[$0]);
                    break;
                case 23:this.$ = new ast.DeclareVarListNode("", $$[$0]);
                    break;
                case 24:this.$ = new ast.DeclareVarListNode($$[$0-2], [new ast.DeclareVarNode($$[$0-4])], $$[$0], true);
                    break;
                case 25: this.$ = new ast.DeclareVarListNode("", [new ast.DeclareVarNode($$[$0-2])], $$[$0], true);
                    break;
                case 26: $$[$0-2].push(new ast.DeclareVarNode($$[$0])); this.$ = $$[$0-2];
                    break;
                case 27: this.$ = [new ast.DeclareVarNode($$[$0])]
                    break;
                case 28: this.$ = new ast.AsignNode($$[$0-2], $$[$0]);
                    break;
                case 29: this.$ = new ast.ConsoleLogNode($$[$0-1]);
                    break;
                case 30:this.$ = new ast.SumNode($$[$0-2],$$[$0]);
                    break;
                case 31:this.$ = new ast.SubNode($$[$0-2], $$[$0]);
                    break;
                case 32:this.$ = new ast.MulNode($$[$0-2],$$[$0]);
                    break;
                case 33:this.$ = new ast.DivNode($$[$0-2],$$[$0]);
                    break;
                case 34:this.$ = new ast.ModNode($$[$0-2],$$[$0]);
                    break;
                case 35:this.$ = new ast.ExpNode($$[$0-2], $$[$0]);
                    break;
                case 36:this.$ = new ast.EqNode($$[$0-2], $$[$0]);
                    break;
                case 37:this.$ = new ast.DifNode($$[$0-2], $$[$0]);
                    break;
                case 38:this.$ = new ast.HigherNode($$[$0-2], $$[$0]);
                    break;
                case 39:this.$ = new ast.HigherEqNode($$[$0-2], $$[$0]);
                    break;
                case 40:this.$ = new ast.MinorEqNode($$[$0-2], $$[$0]);
                    break;
                case 41:this.$ = new ast.MinorNode($$[$0-2], $$[$0]);
                    break;
                case 42:this.$ = new ast.OrNode($$[$0-2], $$[$0]);
                    break;
                case 43:this.$ = new ast.AndNode($$[$0-2], $$[$0]);
                    break;
                case 44:this.$ = new ast.NotNode($$[$0]);
                    break;
                case 45:this.$ = $$[$0-1];
                    break;
                case 46:this.$ = new ast.MulNode($$[$0], new ast.NumberNode(-1));
                    break;
                case 47: this.$ = $$[$0]
                    break;
                case 48:this.$ = new ast.NumberNode(Number(yytext));
                    break;
                case 49:this.$ = new ast.StringNode(yytext);
                    break;
                case 50: this.$ = new ast.NullNode();
                    break;
                case 51: this.$ = new ast.UndefinedNode();
                    break;
                case 52:this.$ = new ast.BooleanNode(false);
                    break;
                case 53:this.$ = new ast.BooleanNode(true);
                    break;
                case 54: this.$ = new ast.CreateIdVarNode($$[$0]);
                    break;
            }
        },
        table: [{3:1,4:2,6:3,8:4,9:5,10:6,11:7,12:11,25:[1,21],26:[1,9],30:[1,10],32:[1,8],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{1:[3]},{5:[1,22],6:23,8:4,9:5,10:6,11:7,12:11,25:[1,21],26:[1,9],30:[1,10],32:[1,8],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{7:[1,24]},{7:[2,4]},{7:[2,5]},{7:[2,6]},{7:[1,25],13:[2,47],14:[2,47],15:[2,47],16:[2,47],17:[2,47],18:[2,47],19:[2,47],29:[2,47],35:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],41:[2,47],42:[2,47],43:[2,47],44:[2,47],45:[2,47],46:[2,47],47:[2,47],48:[2,47]},{33:[1,26]},{25:[1,28],27:27},{25:[1,29]},{13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[1,30],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[1,46],44:[1,47],45:[1,48],46:[1,49],47:[1,50],48:[1,51]},{11:53,12:52,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:54,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:55,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{7:[2,48],13:[2,48],14:[2,48],15:[2,48],16:[2,48],17:[2,48],18:[2,48],19:[2,48],29:[2,48],34:[2,48],35:[2,48],36:[2,48],37:[2,48],38:[2,48],39:[2,48],40:[2,48],41:[2,48],42:[2,48],43:[2,48],44:[2,48],45:[2,48],46:[2,48],47:[2,48],48:[2,48]},{7:[2,49],13:[2,49],14:[2,49],15:[2,49],16:[2,49],17:[2,49],18:[2,49],19:[2,49],29:[2,49],34:[2,49],35:[2,49],36:[2,49],37:[2,49],38:[2,49],39:[2,49],40:[2,49],41:[2,49],42:[2,49],43:[2,49],44:[2,49],45:[2,49],46:[2,49],47:[2,49],48:[2,49]},{7:[2,50],13:[2,50],14:[2,50],15:[2,50],16:[2,50],17:[2,50],18:[2,50],19:[2,50],29:[2,50],34:[2,50],35:[2,50],36:[2,50],37:[2,50],38:[2,50],39:[2,50],40:[2,50],41:[2,50],42:[2,50],43:[2,50],44:[2,50],45:[2,50],46:[2,50],47:[2,50],48:[2,50]},{7:[2,51],13:[2,51],14:[2,51],15:[2,51],16:[2,51],17:[2,51],18:[2,51],19:[2,51],29:[2,51],34:[2,51],35:[2,51],36:[2,51],37:[2,51],38:[2,51],39:[2,51],40:[2,51],41:[2,51],42:[2,51],43:[2,51],44:[2,51],45:[2,51],46:[2,51],47:[2,51],48:[2,51]},{7:[2,52],13:[2,52],14:[2,52],15:[2,52],16:[2,52],17:[2,52],18:[2,52],19:[2,52],29:[2,52],34:[2,52],35:[2,52],36:[2,52],37:[2,52],38:[2,52],39:[2,52],40:[2,52],41:[2,52],42:[2,52],43:[2,52],44:[2,52],45:[2,52],46:[2,52],47:[2,52],48:[2,52]},{7:[2,53],13:[2,53],14:[2,53],15:[2,53],16:[2,53],17:[2,53],18:[2,53],19:[2,53],29:[2,53],34:[2,53],35:[2,53],36:[2,53],37:[2,53],38:[2,53],39:[2,53],40:[2,53],41:[2,53],42:[2,53],43:[2,53],44:[2,53],45:[2,53],46:[2,53],47:[2,53],48:[2,53]},{7:[2,54],13:[2,54],14:[2,54],15:[2,54],16:[2,54],17:[2,54],18:[2,54],19:[2,54],29:[2,54],34:[2,54],35:[2,54],36:[2,54],37:[2,54],38:[2,54],39:[2,54],40:[2,54],41:[2,54],42:[2,54],43:[2,54],44:[2,54],45:[2,54],46:[2,54],47:[2,54],48:[2,54]},{1:[2,1]},{7:[1,56]},{5:[2,3],25:[2,3],26:[2,3],30:[2,3],32:[2,3],33:[2,3],36:[2,3],49:[2,3],50:[2,3],51:[2,3],52:[2,3],53:[2,3],54:[2,3],55:[2,3]},{7:[2,7]},{11:53,12:57,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{7:[2,23],28:[1,58],29:[1,59],31:[1,60]},{7:[2,27],28:[2,27],29:[2,27],31:[2,27]},{28:[1,61],29:[1,62]},{11:53,12:63,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:64,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:65,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:66,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:67,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:68,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{7:[2,13],13:[2,13],14:[2,13],15:[2,13],16:[2,13],17:[2,13],18:[2,13],19:[2,13],29:[2,13],34:[2,13],35:[2,13],36:[2,13],37:[2,13],38:[2,13],39:[2,13],40:[2,13],41:[2,13],42:[2,13],43:[2,13],44:[2,13],45:[2,13],46:[2,13],47:[2,13],48:[2,13]},{7:[2,14],13:[2,14],14:[2,14],15:[2,14],16:[2,14],17:[2,14],18:[2,14],19:[2,14],29:[2,14],34:[2,14],35:[2,14],36:[2,14],37:[2,14],38:[2,14],39:[2,14],40:[2,14],41:[2,14],42:[2,14],43:[2,14],44:[2,14],45:[2,14],46:[2,14],47:[2,14],48:[2,14]},{11:53,12:69,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:70,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:71,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:72,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:73,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:74,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:75,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:76,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:77,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:78,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:79,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:80,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:81,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:82,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{7:[2,44],13:[2,44],14:[2,44],15:[2,44],16:[2,44],17:[2,44],18:[1,36],19:[1,37],29:[2,44],34:[2,44],35:[2,44],36:[2,44],37:[2,44],38:[2,44],39:[2,44],40:[2,44],41:[2,44],42:[2,44],43:[2,44],44:[2,44],45:[2,44],46:[2,44],47:[2,44],48:[2,44]},{7:[2,47],13:[2,47],14:[2,47],15:[2,47],16:[2,47],17:[2,47],18:[2,47],19:[2,47],29:[2,47],34:[2,47],35:[2,47],36:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],41:[2,47],42:[2,47],43:[2,47],44:[2,47],45:[2,47],46:[2,47],47:[2,47],48:[2,47]},{13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],34:[1,83],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[1,46],44:[1,47],45:[1,48],46:[1,49],47:[1,50],48:[1,51]},{7:[2,46],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,46],34:[2,46],35:[2,46],36:[2,46],37:[2,46],38:[2,46],39:[2,46],40:[2,46],41:[2,46],42:[2,46],43:[2,46],44:[2,46],45:[2,46],46:[2,46],47:[2,46],48:[2,46]},{5:[2,2],25:[2,2],26:[2,2],30:[2,2],32:[2,2],33:[2,2],36:[2,2],49:[2,2],50:[2,2],51:[2,2],52:[2,2],53:[2,2],54:[2,2],55:[2,2]},{13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],34:[1,84],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[1,46],44:[1,47],45:[1,48],46:[1,49],47:[1,50],48:[1,51]},{20:85,21:[1,86],22:[1,87],23:[1,88],24:[1,89],25:[1,90]},{11:53,12:91,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{25:[1,92]},{20:93,21:[1,86],22:[1,87],23:[1,88],24:[1,89],25:[1,90]},{11:53,12:94,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{7:[2,28],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[1,46],44:[1,47],45:[1,48],46:[1,49],47:[1,50],48:[1,51]},{7:[2,8],13:[2,8],14:[2,8],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,8],34:[2,8],35:[2,8],36:[2,8],37:[2,8],38:[2,8],39:[2,8],40:[2,8],41:[2,8],42:[2,8],43:[2,8],44:[2,8],45:[2,8],46:[2,8],47:[2,8],48:[2,8]},{7:[2,9],13:[2,9],14:[2,9],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,9],34:[2,9],35:[2,9],36:[2,9],37:[2,9],38:[2,9],39:[2,9],40:[2,9],41:[2,9],42:[2,9],43:[2,9],44:[2,9],45:[2,9],46:[2,9],47:[2,9],48:[2,9]},{7:[2,10],13:[2,10],14:[2,10],15:[2,10],16:[2,10],17:[2,10],18:[1,36],19:[1,37],29:[2,10],34:[2,10],35:[2,10],36:[2,10],37:[2,10],38:[2,10],39:[2,10],40:[2,10],41:[2,10],42:[2,10],43:[2,10],44:[2,10],45:[2,10],46:[2,10],47:[2,10],48:[2,10]},{7:[2,11],13:[2,11],14:[2,11],15:[2,11],16:[2,11],17:[2,11],18:[1,36],19:[1,37],29:[2,11],34:[2,11],35:[2,11],36:[2,11],37:[2,11],38:[2,11],39:[2,11],40:[2,11],41:[2,11],42:[2,11],43:[2,11],44:[2,11],45:[2,11],46:[2,11],47:[2,11],48:[2,11]},{7:[2,12],13:[2,12],14:[2,12],15:[2,12],16:[2,12],17:[2,12],18:[1,36],19:[1,37],29:[2,12],34:[2,12],35:[2,12],36:[2,12],37:[2,12],38:[2,12],39:[2,12],40:[2,12],41:[2,12],42:[2,12],43:[2,12],44:[2,12],45:[2,12],46:[2,12],47:[2,12],48:[2,12]},{7:[2,30],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,30],34:[2,30],35:[2,30],36:[2,30],37:[1,40],38:[1,41],39:[1,42],40:[2,30],41:[2,30],42:[2,30],43:[2,30],44:[2,30],45:[2,30],46:[2,30],47:[2,30],48:[2,30]},{7:[2,31],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,31],34:[2,31],35:[2,31],36:[2,31],37:[1,40],38:[1,41],39:[1,42],40:[2,31],41:[2,31],42:[2,31],43:[2,31],44:[2,31],45:[2,31],46:[2,31],47:[2,31],48:[2,31]},{7:[2,32],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,32],34:[2,32],35:[2,32],36:[2,32],37:[2,32],38:[2,32],39:[2,32],40:[2,32],41:[2,32],42:[2,32],43:[2,32],44:[2,32],45:[2,32],46:[2,32],47:[2,32],48:[2,32]},{7:[2,33],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,33],34:[2,33],35:[2,33],36:[2,33],37:[2,33],38:[2,33],39:[2,33],40:[2,33],41:[2,33],42:[2,33],43:[2,33],44:[2,33],45:[2,33],46:[2,33],47:[2,33],48:[2,33]},{7:[2,34],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,34],34:[2,34],35:[2,34],36:[2,34],37:[2,34],38:[2,34],39:[2,34],40:[2,34],41:[2,34],42:[2,34],43:[2,34],44:[2,34],45:[2,34],46:[2,34],47:[2,34],48:[2,34]},{7:[2,35],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,35],34:[2,35],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[2,35],41:[1,44],42:[1,45],43:[1,46],44:[1,47],45:[1,48],46:[1,49],47:[2,35],48:[2,35]},{7:[2,36],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,36],34:[2,36],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[2,36],41:[2,36],42:[2,36],43:[1,46],44:[1,47],45:[1,48],46:[1,49],47:[2,36],48:[2,36]},{7:[2,37],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,37],34:[2,37],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[2,37],41:[2,37],42:[2,37],43:[1,46],44:[1,47],45:[1,48],46:[1,49],47:[2,37],48:[2,37]},{7:[2,38],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,38],34:[2,38],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[2,38],41:[2,38],42:[2,38],43:[2,38],44:[2,38],45:[2,38],46:[2,38],47:[2,38],48:[2,38]},{7:[2,39],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,39],34:[2,39],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[2,39],41:[2,39],42:[2,39],43:[2,39],44:[2,39],45:[2,39],46:[2,39],47:[2,39],48:[2,39]},{7:[2,40],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,40],34:[2,40],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[2,40],41:[2,40],42:[2,40],43:[2,40],44:[2,40],45:[2,40],46:[2,40],47:[2,40],48:[2,40]},{7:[2,41],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,41],34:[2,41],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[2,41],41:[2,41],42:[2,41],43:[2,41],44:[2,41],45:[2,41],46:[2,41],47:[2,41],48:[2,41]},{7:[2,42],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,42],34:[2,42],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[1,46],44:[1,47],45:[1,48],46:[1,49],47:[2,42],48:[1,51]},{7:[2,43],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],29:[2,43],34:[2,43],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[1,46],44:[1,47],45:[1,48],46:[1,49],47:[2,43],48:[2,43]},{7:[2,45],13:[2,45],14:[2,45],15:[2,45],16:[2,45],17:[2,45],18:[2,45],19:[2,45],29:[2,45],34:[2,45],35:[2,45],36:[2,45],37:[2,45],38:[2,45],39:[2,45],40:[2,45],41:[2,45],42:[2,45],43:[2,45],44:[2,45],45:[2,45],46:[2,45],47:[2,45],48:[2,45]},{7:[2,29]},{7:[2,21],29:[1,95]},{7:[2,15],29:[2,15]},{7:[2,16],29:[2,16]},{7:[2,17],29:[2,17]},{7:[2,18],29:[2,18]},{7:[2,19],29:[2,19]},{7:[2,22],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[1,46],44:[1,47],45:[1,48],46:[1,49],47:[1,50],48:[1,51]},{7:[2,26],28:[2,26],29:[2,26],31:[2,26]},{29:[1,96]},{7:[2,25],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[1,46],44:[1,47],45:[1,48],46:[1,49],47:[1,50],48:[1,51]},{11:53,12:97,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{11:53,12:98,25:[1,21],33:[1,13],36:[1,14],49:[1,12],50:[1,15],51:[1,16],52:[1,17],53:[1,18],54:[1,19],55:[1,20]},{7:[2,20],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[1,46],44:[1,47],45:[1,48],46:[1,49],47:[1,50],48:[1,51]},{7:[2,24],13:[1,31],14:[1,32],15:[1,33],16:[1,34],17:[1,35],18:[1,36],19:[1,37],35:[1,38],36:[1,39],37:[1,40],38:[1,41],39:[1,42],40:[1,43],41:[1,44],42:[1,45],43:[1,46],44:[1,47],45:[1,48],46:[1,49],47:[1,50],48:[1,51]}],
        defaultActions: {4:[2,4],5:[2,5],6:[2,6],22:[2,1],25:[2,7],84:[2,29]},
        parseError: function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},
        parse: function parse(input) {
            var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            this.lexer.setInput(input);
            this.lexer.yy = this.yy;
            this.yy.lexer = this.lexer;
            this.yy.parser = this;
            if (typeof this.lexer.yylloc == 'undefined') {
                this.lexer.yylloc = {};
            }
            var yyloc = this.lexer.yylloc;
            lstack.push(yyloc);
            var ranges = this.lexer.options && this.lexer.options.ranges;
            if (typeof this.yy.parseError === 'function') {
                this.parseError = this.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            function lex() {
                var token;
                token = self.lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            }
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (this.lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: this.lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: this.lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(this.lexer.yytext);
                        lstack.push(this.lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = this.lexer.yyleng;
                            yytext = this.lexer.yytext;
                            yylineno = this.lexer.yylineno;
                            yyloc = this.lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            this.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }};
    /* generated by jison-lex 0.2.1 */
    var lexer = (function(){
        var lexer = {

            EOF:1,

            parseError:function parseError(str,hash){if(this.yy.parser){this.yy.parser.parseError(str,hash)}else{throw new Error(str)}},

// resets the lexer, sets new input
            setInput:function(input){this._input=input;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},

// consumes and returns one char from the input
            input:function(){var ch=this._input[0];this.yytext+=ch;this.yyleng++;this.offset++;this.match+=ch;this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return ch},

// unshifts one char (or a string) into the input
            unput:function(ch){var len=ch.length;var lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-len-1);this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(lines.length-1){this.yylineno-=lines.length-1}var r=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len};if(this.options.ranges){this.yylloc.range=[r[0],r[0]+this.yyleng-len]}this.yyleng=this.yytext.length;return this},

// When called from action, caches matched text and appends it on next action
            more:function(){this._more=true;return this},

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject:function(){if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},

// retain first n characters of the match
            less:function(n){this.unput(this.match.slice(n))},

// displays already matched input, i.e. for error messages
            pastInput:function(){var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},

// displays upcoming input, i.e. for error messages
            upcomingInput:function(){var next=this.match;if(next.length<20){next+=this._input.substr(0,20-next.length)}return(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},

// displays the character position where the lexing error occurred, i.e. for error messages
            showPosition:function(){var pre=this.pastInput();var c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},

// test the lexed token: return FALSE when not a match, otherwise return token
            test_match:function(match,indexed_rule){var token,lines,backup;if(this.options.backtrack_lexer){backup={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){backup.yylloc.range=this.yylloc.range.slice(0)}}lines=match[0].match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno+=lines.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length};this.yytext+=match[0];this.match+=match[0];this.matches=match;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(match[0].length);this.matched+=match[0];token=this.performAction.call(this,this.yy,this,indexed_rule,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(token){return token}else if(this._backtrack){for(var k in backup){this[k]=backup[k]}return false}return false},

// return next match in input
            next:function(){if(this.done){return this.EOF}if(!this._input){this.done=true}var token,match,tempMatch,index;if(!this._more){this.yytext="";this.match=""}var rules=this._currentRules();for(var i=0;i<rules.length;i++){tempMatch=this._input.match(this.rules[rules[i]]);if(tempMatch&&(!match||tempMatch[0].length>match[0].length)){match=tempMatch;index=i;if(this.options.backtrack_lexer){token=this.test_match(tempMatch,rules[i]);if(token!==false){return token}else if(this._backtrack){match=false;continue}else{return false}}else if(!this.options.flex){break}}}if(match){token=this.test_match(match,rules[index]);if(token!==false){return token}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},

// return next match that has a token
            lex:function lex(){var r=this.next();if(r){return r}else{return this.lex()}},

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin:function begin(condition){this.conditionStack.push(condition)},

// pop the previously active lexer condition state off the condition stack
            popState:function popState(){var n=this.conditionStack.length-1;if(n>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},

// produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules:function _currentRules(){if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState:function topState(n){n=this.conditionStack.length-1-Math.abs(n||0);if(n>=0){return this.conditionStack[n]}else{return"INITIAL"}},

// alias for begin(condition)
            pushState:function pushState(condition){this.begin(condition)},

// return the number of states currently on the stack
            stateStackSize:function stateStackSize(){return this.conditionStack.length},
            options: {},
            performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
            ) {

                var YYSTATE=YY_START;
                switch($avoiding_name_collisions) {
                    case 0:

                        this.begin('no joda man xD');

                        break;
                    case 1:

                        this.popState();

                        break;
                    case 2:/* skip comment content*/
                        break;
                    case 3:return 52;
                        break;
                    case 4:return 53;
                        break;
                    case 5:return 54;
                        break;
                    case 6:return 55;
                        break;
                    case 7:return 21;
                        break;
                    case 8:return 22;
                        break;
                    case 9:return 23;
                        break;
                    case 10:return 24;
                        break;
                    case 11:return 30;
                        break;
                    case 12:return 26
                        break;
                    case 13:return 32;
                        break;
                    case 14:/* skip whitespace */
                        break;
                    case 15:return 50
                        break;
                    case 16:return 51;
                        break;
                    case 17:return 13
                        break;
                    case 18:return 14
                        break;
                    case 19:return 15
                        break;
                    case 20:return 16
                        break;
                    case 21:return 17
                        break;
                    case 22:return 18
                        break;
                    case 23:return 19
                        break;
                    case 24:return 37
                        break;
                    case 25:return 38
                        break;
                    case 26:return 36
                        break;
                    case 27:return 35
                        break;
                    case 28:return 40
                        break;
                    case 29:return 39
                        break;
                    case 30:return 33
                        break;
                    case 31:return 34
                        break;
                    case 32:return 7
                        break;
                    case 33:return 31
                        break;
                    case 34:return 28
                        break;
                    case 35:return 41
                        break;
                    case 36:return 42
                        break;
                    case 37:return 29
                        break;
                    case 38:return 44
                        break;
                    case 39:return 45
                        break;
                    case 40:return 43
                        break;
                    case 41:return 46
                        break;
                    case 42:return 47
                        break;
                    case 43:return 48
                        break;
                    case 44:return 49
                        break;
                    case 45:return '?'
                        break;
                    case 46:return '.'
                        break;
                    case 47:return '['
                        break;
                    case 48:return ']'
                        break;
                    case 49:return 25;
                        break;
                    case 50:return 5
                        break;
                    case 51:return 'INVALID'
                        break;
                }
            },
            rules: [/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:null\b)/,/^(?:undefined\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:any\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:console\.log\b)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:(("(([^"\\^'\\]|((\\[btnfr"'\\])))+)?")|('(([^"\\^'\\]|((\\[btnfr"'\\])))+)?')))/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\?)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
            conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true},"INITIAL":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51],"inclusive":true}}
        };
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser () {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = parser;
    exports.Parser = parser.Parser;
    exports.parse = function () { return parser.parse.apply(parser, arguments); };
    exports.main = function commonjsMain(args){if(!args[1]){console.log("Usage: "+args[0]+" FILE");process.exit(1)}var source=require("fs").readFileSync(require("path").normalize(args[1]),"utf8");return exports.parser.parse(source)};
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}