/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calc = (function(){
    var parser = {trace: function trace(){},
        yy: {},
        symbols_: {"error":2,"expressions":3,"sentences":4,"EOF":5,"sentence":6,"consoleLog":7,";":8,"breakControl":9,"continueControl":10,"ifControl":11,"whileControl":12,"letDeclarations":13,"asigna":14,"e":15,"increment":16,"+=":17,"-=":18,"*=":19,"/=":20,"%=":21,"++":22,"--":23,"varType":24,"NUMBER_TYPE":25,"STRING_TYPE":26,"BOOLEAN_TYPE":27,"ANY_TYPE":28,"IDENTIFIER":29,"ARRAY_TYPE":30,"<":31,">":32,"corchetes":33,"[":34,"]":35,"LET":36,"idList":37,":":38,"=":39,"CONST":40,",":41,"console.log":42,"(":43,")":44,"break":45,"continue":46,"while":47,"ifBody":48,"if":49,"else":50,"{":51,"}":52,"+":53,"-":54,"*":55,"/":56,"%":57,"^":58,"==":59,"!=":60,">=":61,"<=":62,"||":63,"&&":64,"!":65,"eList":66,"?":67,".":68,"NUMBER":69,"STRING":70,"NULL":71,"UNDEFINED":72,"FALSE":73,"TRUE":74,"$accept":0,"$end":1},
        terminals_: {2:"error",5:"EOF",8:";",17:"+=",18:"-=",19:"*=",20:"/=",21:"%=",22:"++",23:"--",25:"NUMBER_TYPE",26:"STRING_TYPE",27:"BOOLEAN_TYPE",28:"ANY_TYPE",29:"IDENTIFIER",30:"ARRAY_TYPE",31:"<",32:">",34:"[",35:"]",36:"LET",38:":",39:"=",40:"CONST",41:",",42:"console.log",43:"(",44:")",45:"break",46:"continue",47:"while",49:"if",50:"else",51:"{",52:"}",53:"+",54:"-",55:"*",56:"/",57:"%",58:"^",59:"==",60:"!=",61:">=",62:"<=",63:"||",64:"&&",65:"!",67:"?",68:".",69:"NUMBER",70:"STRING",71:"NULL",72:"UNDEFINED",73:"FALSE",74:"TRUE"},
        productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,2],[6,2],[6,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,2],[24,1],[24,1],[24,1],[24,1],[24,1],[24,4],[33,3],[33,2],[13,6],[13,4],[13,4],[13,2],[13,6],[13,4],[13,7],[13,5],[13,7],[13,5],[37,3],[37,1],[14,3],[7,4],[9,1],[10,1],[12,5],[11,5],[11,7],[11,7],[48,3],[48,1],[48,2],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,3],[15,2],[15,3],[15,2],[15,3],[15,4],[15,5],[15,5],[15,6],[15,3],[15,2],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[66,3],[66,1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
        ) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:return $$[$0-1];
                    break;
                case 2: $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
                    break;
                case 3: this.$ = [$$[$0]];
                    break;
                case 4:this.$ = $$[$0-1];
                    break;
                case 5: this.$ = $$[$0-1];
                    break;
                case 6: this.$ = $$[$0-1];
                    break;
                case 7: this.$ = $$[$0];
                    break;
                case 8: this.$ = $$[$0];
                    break;
                case 9: this.$ = $$[$0-1];
                    break;
                case 10: this.$ = $$[$0-1];
                    break;
                case 11: this.$ = $$[$0-1];
                    break;
                case 12: this.$ = new ast.ReAsignAddNode($$[$0-2], $$[$0]);
                    break;
                case 13: this.$ = new ast.ReAsignSubNode($$[$0-2], $$[$0]);
                    break;
                case 14: this.$ = new ast.ReAsignMulNode($$[$0-2], $$[$0]);
                    break;
                case 15: this.$ = new ast.ReAsignDivNode($$[$0-2], $$[$0]);
                    break;
                case 16: this.$ = new ast.ReAsignModNode($$[$0-2], $$[$0]);
                    break;
                case 17: this.$ = new ast.ReAddNode($$[$0-1]);
                    break;
                case 18: this.$ = new ast.ReSubNode($$[$0-1]);
                    break;
                case 19: this.$ = $$[$0];
                    break;
                case 20: this.$ = $$[$0];
                    break;
                case 21: this.$ = $$[$0];
                    break;
                case 22: this.$ = $$[$0];
                    break;
                case 23: this.$ = $$[$0];
                    break;
                case 24: this.$ = $$[$0-3];
                    break;
                case 27:this.$ = new ast.DeclareVarListNode($$[$0-2], $$[$0-4], $$[$0]);
                    break;
                case 28: this.$ = new ast.DeclareVarListNode($$[$0], $$[$0-2]);
                    break;
                case 29: this.$ = new ast.DeclareVarListNode("", $$[$0-2], $$[$0]);
                    break;
                case 30:this.$ = new ast.DeclareVarListNode("", $$[$0]);
                    break;
                case 31:this.$ = new ast.DeclareVarListNode($$[$0-2], [new ast.DeclareVarNode($$[$0-4])], $$[$0], true);
                    break;
                case 32: this.$ = new ast.DeclareVarListNode("", [new ast.DeclareVarNode($$[$0-2])], $$[$0], true);
                    break;
                case 33:this.$ = new ast.DeclareVarListNode('ARRAY', $$[$0-5], $$[$0]);
                    break;
                case 34: this.$ = new ast.DeclareVarListNode('ARRAY', $$[$0-3]);
                    break;
                case 35:this.$ = new ast.DeclareVarListNode('ARRAY', [new ast.DeclareVarNode($$[$0-5])], $$[$0], true);
                    break;
                case 36: this.$ = new ast.DeclareVarListNode("", [new ast.DeclareVarNode($$[$0-3])], $$[$0], true);
                    break;
                case 37: $$[$0-2].push(new ast.DeclareVarNode($$[$0])); this.$ = $$[$0-2];
                    break;
                case 38: this.$ = [new ast.DeclareVarNode($$[$0])]
                    break;
                case 39: this.$ = new ast.AsignNode($$[$0-2], $$[$0]);
                    break;
                case 40: this.$ = new ast.ConsoleLogNode($$[$0-1]);
                    break;
                case 41: this.$ = new ast.BreakNode();
                    break;
                case 42: this.$ = new ast.ContinueNode();
                    break;
                case 43: this.$ = new ast.WhileNode($$[$0-2], $$[$0]);
                    break;
                case 44: this.$ = new ast.IfNode($$[$0-2], $$[$0], []);
                    break;
                case 45: this.$ = new ast.IfNode($$[$0-4], $$[$0-2], $$[$0]);
                    break;
                case 46: this.$ = new ast.IfNode($$[$0-4], $$[$0-2], [$$[$0]]);
                    break;
                case 47: this.$ = $$[$0-1];
                    break;
                case 48:this.$ = [$$[$0]];
                    break;
                case 49:this.$ = [];
                    break;
                case 50:this.$ = new ast.SumNode($$[$0-2],$$[$0]);
                    break;
                case 51:this.$ = new ast.SubNode($$[$0-2], $$[$0]);
                    break;
                case 52:this.$ = new ast.MulNode($$[$0-2],$$[$0]);
                    break;
                case 53:this.$ = new ast.DivNode($$[$0-2],$$[$0]);
                    break;
                case 54:this.$ = new ast.ModNode($$[$0-2],$$[$0]);
                    break;
                case 55:this.$ = new ast.ExpNode($$[$0-2], $$[$0]);
                    break;
                case 56:this.$ = new ast.EqNode($$[$0-2], $$[$0]);
                    break;
                case 57:this.$ = new ast.DifNode($$[$0-2], $$[$0]);
                    break;
                case 58:this.$ = new ast.HigherNode($$[$0-2], $$[$0]);
                    break;
                case 59:this.$ = new ast.HigherEqNode($$[$0-2], $$[$0]);
                    break;
                case 60:this.$ = new ast.MinorEqNode($$[$0-2], $$[$0]);
                    break;
                case 61:this.$ = new ast.MinorNode($$[$0-2], $$[$0]);
                    break;
                case 62:this.$ = new ast.OrNode($$[$0-2], $$[$0]);
                    break;
                case 63:this.$ = new ast.AndNode($$[$0-2], $$[$0]);
                    break;
                case 64:this.$ = new ast.NotNode($$[$0]);
                    break;
                case 65:this.$ = $$[$0-1];
                    break;
                case 66: this.$ = new ast.CreateArrayNode([]);
                    break;
                case 67: this.$ = new ast.CreateArrayNode($$[$0-1]);
                    break;
                case 68: this.$ = new ast.CreateArrVarNode($$[$0-3], $$[$0-1]);
                    break;
                case 69: this.$ = new ast.SentenceTernaryNode($$[$0-4], $$[$0-2], $$[$0]);
                    break;
                case 70: this.$ = new ast.CreateObjFunNode($$[$0-4], $$[$0-2], []);
                    break;
                case 71: this.$ = new ast.CreateObjFunNode($$[$0-5], $$[$0-3], $$[$0-1]);
                    break;
                case 72: this.$ = new ast.CreateObjVarNode($$[$0-2], $$[$0]);
                    break;
                case 73:this.$ = new ast.MulNode($$[$0], new ast.NumberNode(-1));
                    break;
                case 74: this.$ = $$[$0]
                    break;
                case 75:this.$ = new ast.NumberNode(Number(yytext));
                    break;
                case 76:this.$ = new ast.StringNode(yytext);
                    break;
                case 77: this.$ = new ast.NullNode();
                    break;
                case 78: this.$ = new ast.UndefinedNode();
                    break;
                case 79:this.$ = new ast.BooleanNode(false);
                    break;
                case 80:this.$ = new ast.BooleanNode(true);
                    break;
                case 81: this.$ = new ast.CreateIdVarNode($$[$0]);
                    break;
                case 82:$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
                    break;
                case 83:this.$ = [$$[$0]]
                    break;
            }
        },
        table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:23,29:[1,30],34:[1,21],36:[1,17],40:[1,18],42:[1,12],43:[1,20],45:[1,13],46:[1,14],47:[1,16],49:[1,15],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{1:[3]},{5:[1,31],6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:23,29:[1,30],34:[1,21],36:[1,17],40:[1,18],42:[1,12],43:[1,20],45:[1,13],46:[1,14],47:[1,16],49:[1,15],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{5:[2,3],29:[2,3],34:[2,3],36:[2,3],40:[2,3],42:[2,3],43:[2,3],45:[2,3],46:[2,3],47:[2,3],49:[2,3],52:[2,3],54:[2,3],65:[2,3],69:[2,3],70:[2,3],71:[2,3],72:[2,3],73:[2,3],74:[2,3]},{8:[1,33]},{8:[1,34]},{8:[1,35]},{5:[2,7],29:[2,7],34:[2,7],36:[2,7],40:[2,7],42:[2,7],43:[2,7],45:[2,7],46:[2,7],47:[2,7],49:[2,7],50:[2,7],52:[2,7],54:[2,7],65:[2,7],69:[2,7],70:[2,7],71:[2,7],72:[2,7],73:[2,7],74:[2,7]},{5:[2,8],29:[2,8],34:[2,8],36:[2,8],40:[2,8],42:[2,8],43:[2,8],45:[2,8],46:[2,8],47:[2,8],49:[2,8],50:[2,8],52:[2,8],54:[2,8],65:[2,8],69:[2,8],70:[2,8],71:[2,8],72:[2,8],73:[2,8],74:[2,8]},{8:[1,36]},{8:[1,37]},{8:[1,38],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],39:[1,39],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{43:[1,64]},{8:[2,41]},{8:[2,42]},{43:[1,65]},{43:[1,66]},{29:[1,68],37:67},{29:[1,69]},{15:70,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:71,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:74,16:23,29:[1,30],34:[1,21],35:[1,72],43:[1,20],54:[1,22],65:[1,19],66:73,69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:75,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{8:[2,74],17:[2,74],18:[2,74],19:[2,74],20:[2,74],21:[2,74],22:[2,74],23:[2,74],31:[2,74],32:[2,74],34:[2,74],35:[2,74],38:[2,74],39:[2,74],41:[2,74],44:[2,74],53:[2,74],54:[2,74],55:[2,74],56:[2,74],57:[2,74],58:[2,74],59:[2,74],60:[2,74],61:[2,74],62:[2,74],63:[2,74],64:[2,74],67:[2,74],68:[2,74]},{8:[2,75],17:[2,75],18:[2,75],19:[2,75],20:[2,75],21:[2,75],22:[2,75],23:[2,75],31:[2,75],32:[2,75],34:[2,75],35:[2,75],38:[2,75],39:[2,75],41:[2,75],44:[2,75],53:[2,75],54:[2,75],55:[2,75],56:[2,75],57:[2,75],58:[2,75],59:[2,75],60:[2,75],61:[2,75],62:[2,75],63:[2,75],64:[2,75],67:[2,75],68:[2,75]},{8:[2,76],17:[2,76],18:[2,76],19:[2,76],20:[2,76],21:[2,76],22:[2,76],23:[2,76],31:[2,76],32:[2,76],34:[2,76],35:[2,76],38:[2,76],39:[2,76],41:[2,76],44:[2,76],53:[2,76],54:[2,76],55:[2,76],56:[2,76],57:[2,76],58:[2,76],59:[2,76],60:[2,76],61:[2,76],62:[2,76],63:[2,76],64:[2,76],67:[2,76],68:[2,76]},{8:[2,77],17:[2,77],18:[2,77],19:[2,77],20:[2,77],21:[2,77],22:[2,77],23:[2,77],31:[2,77],32:[2,77],34:[2,77],35:[2,77],38:[2,77],39:[2,77],41:[2,77],44:[2,77],53:[2,77],54:[2,77],55:[2,77],56:[2,77],57:[2,77],58:[2,77],59:[2,77],60:[2,77],61:[2,77],62:[2,77],63:[2,77],64:[2,77],67:[2,77],68:[2,77]},{8:[2,78],17:[2,78],18:[2,78],19:[2,78],20:[2,78],21:[2,78],22:[2,78],23:[2,78],31:[2,78],32:[2,78],34:[2,78],35:[2,78],38:[2,78],39:[2,78],41:[2,78],44:[2,78],53:[2,78],54:[2,78],55:[2,78],56:[2,78],57:[2,78],58:[2,78],59:[2,78],60:[2,78],61:[2,78],62:[2,78],63:[2,78],64:[2,78],67:[2,78],68:[2,78]},{8:[2,79],17:[2,79],18:[2,79],19:[2,79],20:[2,79],21:[2,79],22:[2,79],23:[2,79],31:[2,79],32:[2,79],34:[2,79],35:[2,79],38:[2,79],39:[2,79],41:[2,79],44:[2,79],53:[2,79],54:[2,79],55:[2,79],56:[2,79],57:[2,79],58:[2,79],59:[2,79],60:[2,79],61:[2,79],62:[2,79],63:[2,79],64:[2,79],67:[2,79],68:[2,79]},{8:[2,80],17:[2,80],18:[2,80],19:[2,80],20:[2,80],21:[2,80],22:[2,80],23:[2,80],31:[2,80],32:[2,80],34:[2,80],35:[2,80],38:[2,80],39:[2,80],41:[2,80],44:[2,80],53:[2,80],54:[2,80],55:[2,80],56:[2,80],57:[2,80],58:[2,80],59:[2,80],60:[2,80],61:[2,80],62:[2,80],63:[2,80],64:[2,80],67:[2,80],68:[2,80]},{8:[2,81],17:[2,81],18:[2,81],19:[2,81],20:[2,81],21:[2,81],22:[2,81],23:[2,81],31:[2,81],32:[2,81],34:[2,81],35:[2,81],38:[2,81],39:[2,81],41:[2,81],44:[2,81],53:[2,81],54:[2,81],55:[2,81],56:[2,81],57:[2,81],58:[2,81],59:[2,81],60:[2,81],61:[2,81],62:[2,81],63:[2,81],64:[2,81],67:[2,81],68:[2,81]},{1:[2,1]},{5:[2,2],29:[2,2],34:[2,2],36:[2,2],40:[2,2],42:[2,2],43:[2,2],45:[2,2],46:[2,2],47:[2,2],49:[2,2],52:[2,2],54:[2,2],65:[2,2],69:[2,2],70:[2,2],71:[2,2],72:[2,2],73:[2,2],74:[2,2]},{5:[2,4],29:[2,4],34:[2,4],36:[2,4],40:[2,4],42:[2,4],43:[2,4],45:[2,4],46:[2,4],47:[2,4],49:[2,4],50:[2,4],52:[2,4],54:[2,4],65:[2,4],69:[2,4],70:[2,4],71:[2,4],72:[2,4],73:[2,4],74:[2,4]},{5:[2,5],29:[2,5],34:[2,5],36:[2,5],40:[2,5],42:[2,5],43:[2,5],45:[2,5],46:[2,5],47:[2,5],49:[2,5],50:[2,5],52:[2,5],54:[2,5],65:[2,5],69:[2,5],70:[2,5],71:[2,5],72:[2,5],73:[2,5],74:[2,5]},{5:[2,6],29:[2,6],34:[2,6],36:[2,6],40:[2,6],42:[2,6],43:[2,6],45:[2,6],46:[2,6],47:[2,6],49:[2,6],50:[2,6],52:[2,6],54:[2,6],65:[2,6],69:[2,6],70:[2,6],71:[2,6],72:[2,6],73:[2,6],74:[2,6]},{5:[2,9],29:[2,9],34:[2,9],36:[2,9],40:[2,9],42:[2,9],43:[2,9],45:[2,9],46:[2,9],47:[2,9],49:[2,9],50:[2,9],52:[2,9],54:[2,9],65:[2,9],69:[2,9],70:[2,9],71:[2,9],72:[2,9],73:[2,9],74:[2,9]},{5:[2,10],29:[2,10],34:[2,10],36:[2,10],40:[2,10],42:[2,10],43:[2,10],45:[2,10],46:[2,10],47:[2,10],49:[2,10],50:[2,10],52:[2,10],54:[2,10],65:[2,10],69:[2,10],70:[2,10],71:[2,10],72:[2,10],73:[2,10],74:[2,10]},{5:[2,11],29:[2,11],34:[2,11],36:[2,11],40:[2,11],42:[2,11],43:[2,11],45:[2,11],46:[2,11],47:[2,11],49:[2,11],50:[2,11],52:[2,11],54:[2,11],65:[2,11],69:[2,11],70:[2,11],71:[2,11],72:[2,11],73:[2,11],74:[2,11]},{15:76,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:77,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:78,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:79,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:80,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:81,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:82,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:83,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:84,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:85,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:86,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:87,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:88,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:89,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:90,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:91,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:92,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{29:[1,93]},{15:94,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:95,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:96,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:97,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:98,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{8:[2,17],17:[2,17],18:[2,17],19:[2,17],20:[2,17],21:[2,17],22:[2,17],23:[2,17],31:[2,17],32:[2,17],34:[2,17],35:[2,17],38:[2,17],39:[2,17],41:[2,17],44:[2,17],53:[2,17],54:[2,17],55:[2,17],56:[2,17],57:[2,17],58:[2,17],59:[2,17],60:[2,17],61:[2,17],62:[2,17],63:[2,17],64:[2,17],67:[2,17],68:[2,17]},{8:[2,18],17:[2,18],18:[2,18],19:[2,18],20:[2,18],21:[2,18],22:[2,18],23:[2,18],31:[2,18],32:[2,18],34:[2,18],35:[2,18],38:[2,18],39:[2,18],41:[2,18],44:[2,18],53:[2,18],54:[2,18],55:[2,18],56:[2,18],57:[2,18],58:[2,18],59:[2,18],60:[2,18],61:[2,18],62:[2,18],63:[2,18],64:[2,18],67:[2,18],68:[2,18]},{15:99,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:100,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:101,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{8:[2,30],38:[1,102],39:[1,103],41:[1,104]},{8:[2,38],38:[2,38],39:[2,38],41:[2,38]},{33:107,34:[1,108],38:[1,105],39:[1,106]},{8:[2,64],17:[2,64],18:[2,64],19:[2,64],20:[2,64],21:[2,64],22:[1,62],23:[1,63],31:[2,64],32:[2,64],34:[1,54],35:[2,64],38:[2,64],39:[2,64],41:[2,64],44:[2,64],53:[2,64],54:[2,64],55:[2,64],56:[2,64],57:[2,64],58:[2,64],59:[2,64],60:[2,64],61:[2,64],62:[2,64],63:[2,64],64:[2,64],67:[2,64],68:[1,56]},{17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],44:[1,109],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{8:[2,66],17:[2,66],18:[2,66],19:[2,66],20:[2,66],21:[2,66],22:[2,66],23:[2,66],31:[2,66],32:[2,66],34:[2,66],35:[2,66],38:[2,66],39:[2,66],41:[2,66],44:[2,66],53:[2,66],54:[2,66],55:[2,66],56:[2,66],57:[2,66],58:[2,66],59:[2,66],60:[2,66],61:[2,66],62:[2,66],63:[2,66],64:[2,66],67:[2,66],68:[2,66]},{35:[1,110],41:[1,111]},{17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],35:[2,83],41:[2,83],44:[2,83],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{8:[2,73],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[2,73],32:[2,73],34:[1,54],35:[2,73],38:[2,73],39:[2,73],41:[2,73],44:[2,73],53:[2,73],54:[2,73],55:[2,73],56:[2,73],57:[2,73],58:[2,73],59:[2,73],60:[2,73],61:[2,73],62:[2,73],63:[2,73],64:[2,73],67:[2,73],68:[1,56]},{8:[2,39],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{8:[2,50],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[2,50],32:[2,50],34:[1,54],35:[2,50],38:[2,50],39:[2,50],41:[2,50],44:[2,50],53:[2,50],54:[2,50],55:[1,42],56:[1,43],57:[1,44],58:[2,50],59:[2,50],60:[2,50],61:[2,50],62:[2,50],63:[2,50],64:[2,50],67:[2,50],68:[1,56]},{8:[2,51],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[2,51],32:[2,51],34:[1,54],35:[2,51],38:[2,51],39:[2,51],41:[2,51],44:[2,51],53:[2,51],54:[2,51],55:[1,42],56:[1,43],57:[1,44],58:[2,51],59:[2,51],60:[2,51],61:[2,51],62:[2,51],63:[2,51],64:[2,51],67:[2,51],68:[1,56]},{8:[2,52],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[2,52],32:[2,52],34:[1,54],35:[2,52],38:[2,52],39:[2,52],41:[2,52],44:[2,52],53:[2,52],54:[2,52],55:[2,52],56:[2,52],57:[2,52],58:[2,52],59:[2,52],60:[2,52],61:[2,52],62:[2,52],63:[2,52],64:[2,52],67:[2,52],68:[1,56]},{8:[2,53],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[2,53],32:[2,53],34:[1,54],35:[2,53],38:[2,53],39:[2,53],41:[2,53],44:[2,53],53:[2,53],54:[2,53],55:[2,53],56:[2,53],57:[2,53],58:[2,53],59:[2,53],60:[2,53],61:[2,53],62:[2,53],63:[2,53],64:[2,53],67:[2,53],68:[1,56]},{8:[2,54],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[2,54],32:[2,54],34:[1,54],35:[2,54],38:[2,54],39:[2,54],41:[2,54],44:[2,54],53:[2,54],54:[2,54],55:[2,54],56:[2,54],57:[2,54],58:[2,54],59:[2,54],60:[2,54],61:[2,54],62:[2,54],63:[2,54],64:[2,54],67:[2,54],68:[1,56]},{8:[2,55],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],35:[2,55],38:[2,55],39:[2,55],41:[2,55],44:[2,55],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[2,55],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[2,55],64:[2,55],67:[2,55],68:[1,56]},{8:[2,56],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],35:[2,56],38:[2,56],39:[2,56],41:[2,56],44:[2,56],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[2,56],59:[2,56],60:[2,56],61:[1,49],62:[1,50],63:[2,56],64:[2,56],67:[2,56],68:[1,56]},{8:[2,57],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],35:[2,57],38:[2,57],39:[2,57],41:[2,57],44:[2,57],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[2,57],59:[2,57],60:[2,57],61:[1,49],62:[1,50],63:[2,57],64:[2,57],67:[2,57],68:[1,56]},{8:[2,58],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[2,58],32:[2,58],34:[1,54],35:[2,58],38:[2,58],39:[2,58],41:[2,58],44:[2,58],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[2,58],59:[2,58],60:[2,58],61:[2,58],62:[2,58],63:[2,58],64:[2,58],67:[2,58],68:[1,56]},{8:[2,59],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[2,59],32:[2,59],34:[1,54],35:[2,59],38:[2,59],39:[2,59],41:[2,59],44:[2,59],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[2,59],59:[2,59],60:[2,59],61:[2,59],62:[2,59],63:[2,59],64:[2,59],67:[2,59],68:[1,56]},{8:[2,60],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[2,60],32:[2,60],34:[1,54],35:[2,60],38:[2,60],39:[2,60],41:[2,60],44:[2,60],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[2,60],59:[2,60],60:[2,60],61:[2,60],62:[2,60],63:[2,60],64:[2,60],67:[2,60],68:[1,56]},{8:[2,61],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[2,61],32:[2,61],34:[1,54],35:[2,61],38:[2,61],39:[2,61],41:[2,61],44:[2,61],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[2,61],59:[2,61],60:[2,61],61:[2,61],62:[2,61],63:[2,61],64:[2,61],67:[2,61],68:[1,56]},{8:[2,62],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],35:[2,62],38:[2,62],39:[2,62],41:[2,62],44:[2,62],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[2,62],64:[1,53],67:[2,62],68:[1,56]},{8:[2,63],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],35:[2,63],38:[2,63],39:[2,63],41:[2,63],44:[2,63],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[2,63],64:[2,63],67:[2,63],68:[1,56]},{17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],35:[1,112],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],38:[1,113],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{8:[2,72],17:[2,72],18:[2,72],19:[2,72],20:[2,72],21:[2,72],22:[2,72],23:[2,72],31:[2,72],32:[2,72],34:[2,72],35:[2,72],38:[2,72],39:[2,72],41:[2,72],43:[1,114],44:[2,72],53:[2,72],54:[2,72],55:[2,72],56:[2,72],57:[2,72],58:[2,72],59:[2,72],60:[2,72],61:[2,72],62:[2,72],63:[2,72],64:[2,72],67:[2,72],68:[2,72]},{8:[2,12],17:[2,12],18:[2,12],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[2,12],32:[2,12],34:[1,54],35:[2,12],38:[2,12],39:[2,12],41:[2,12],44:[2,12],53:[2,12],54:[2,12],55:[2,12],56:[2,12],57:[2,12],58:[2,12],59:[2,12],60:[2,12],61:[2,12],62:[2,12],63:[2,12],64:[2,12],67:[2,12],68:[1,56]},{8:[2,13],17:[2,13],18:[2,13],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[2,13],32:[2,13],34:[1,54],35:[2,13],38:[2,13],39:[2,13],41:[2,13],44:[2,13],53:[2,13],54:[2,13],55:[2,13],56:[2,13],57:[2,13],58:[2,13],59:[2,13],60:[2,13],61:[2,13],62:[2,13],63:[2,13],64:[2,13],67:[2,13],68:[1,56]},{8:[2,14],17:[2,14],18:[2,14],19:[2,14],20:[2,14],21:[2,14],22:[1,62],23:[1,63],31:[2,14],32:[2,14],34:[1,54],35:[2,14],38:[2,14],39:[2,14],41:[2,14],44:[2,14],53:[2,14],54:[2,14],55:[2,14],56:[2,14],57:[2,14],58:[2,14],59:[2,14],60:[2,14],61:[2,14],62:[2,14],63:[2,14],64:[2,14],67:[2,14],68:[1,56]},{8:[2,15],17:[2,15],18:[2,15],19:[2,15],20:[2,15],21:[2,15],22:[1,62],23:[1,63],31:[2,15],32:[2,15],34:[1,54],35:[2,15],38:[2,15],39:[2,15],41:[2,15],44:[2,15],53:[2,15],54:[2,15],55:[2,15],56:[2,15],57:[2,15],58:[2,15],59:[2,15],60:[2,15],61:[2,15],62:[2,15],63:[2,15],64:[2,15],67:[2,15],68:[1,56]},{8:[2,16],17:[2,16],18:[2,16],19:[2,16],20:[2,16],21:[2,16],22:[1,62],23:[1,63],31:[2,16],32:[2,16],34:[1,54],35:[2,16],38:[2,16],39:[2,16],41:[2,16],44:[2,16],53:[2,16],54:[2,16],55:[2,16],56:[2,16],57:[2,16],58:[2,16],59:[2,16],60:[2,16],61:[2,16],62:[2,16],63:[2,16],64:[2,16],67:[2,16],68:[1,56]},{17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],44:[1,115],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],44:[1,116],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],44:[1,117],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{24:118,25:[1,119],26:[1,120],27:[1,121],28:[1,122],29:[1,123],30:[1,124]},{15:125,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{29:[1,126]},{24:127,25:[1,119],26:[1,120],27:[1,121],28:[1,122],29:[1,123],30:[1,124]},{15:128,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{34:[1,130],39:[1,129]},{35:[1,131]},{8:[2,65],17:[2,65],18:[2,65],19:[2,65],20:[2,65],21:[2,65],22:[2,65],23:[2,65],31:[2,65],32:[2,65],34:[2,65],35:[2,65],38:[2,65],39:[2,65],41:[2,65],44:[2,65],53:[2,65],54:[2,65],55:[2,65],56:[2,65],57:[2,65],58:[2,65],59:[2,65],60:[2,65],61:[2,65],62:[2,65],63:[2,65],64:[2,65],67:[2,65],68:[2,65]},{8:[2,67],17:[2,67],18:[2,67],19:[2,67],20:[2,67],21:[2,67],22:[2,67],23:[2,67],31:[2,67],32:[2,67],34:[2,67],35:[2,67],38:[2,67],39:[2,67],41:[2,67],44:[2,67],53:[2,67],54:[2,67],55:[2,67],56:[2,67],57:[2,67],58:[2,67],59:[2,67],60:[2,67],61:[2,67],62:[2,67],63:[2,67],64:[2,67],67:[2,67],68:[2,67]},{15:132,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{8:[2,68],17:[2,68],18:[2,68],19:[2,68],20:[2,68],21:[2,68],22:[2,68],23:[2,68],31:[2,68],32:[2,68],34:[2,68],35:[2,68],38:[2,68],39:[2,68],41:[2,68],44:[2,68],53:[2,68],54:[2,68],55:[2,68],56:[2,68],57:[2,68],58:[2,68],59:[2,68],60:[2,68],61:[2,68],62:[2,68],63:[2,68],64:[2,68],67:[2,68],68:[2,68]},{15:133,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{15:74,16:23,29:[1,30],34:[1,21],43:[1,20],44:[1,134],54:[1,22],65:[1,19],66:135,69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{8:[2,40]},{6:138,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:23,29:[1,30],34:[1,21],36:[1,17],40:[1,18],42:[1,12],43:[1,20],45:[1,13],46:[1,14],47:[1,16],48:136,49:[1,15],51:[1,137],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{6:138,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:23,29:[1,30],34:[1,21],36:[1,17],40:[1,18],42:[1,12],43:[1,20],45:[1,13],46:[1,14],47:[1,16],48:139,49:[1,15],51:[1,137],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{8:[2,28],33:141,34:[1,108],39:[1,140]},{8:[2,19],32:[2,19],34:[2,19],39:[2,19]},{8:[2,20],32:[2,20],34:[2,20],39:[2,20]},{8:[2,21],32:[2,21],34:[2,21],39:[2,21]},{8:[2,22],32:[2,22],34:[2,22],39:[2,22]},{8:[2,23],32:[2,23],34:[2,23],39:[2,23]},{31:[1,142]},{8:[2,29],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{8:[2,37],38:[2,37],39:[2,37],41:[2,37]},{33:144,34:[1,108],39:[1,143]},{8:[2,32],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{15:145,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{35:[1,146]},{8:[2,26],34:[2,26],39:[2,26]},{17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],35:[2,82],41:[2,82],44:[2,82],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{8:[2,69],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],35:[2,69],38:[2,69],39:[2,69],41:[2,69],44:[2,69],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{8:[2,70],17:[2,70],18:[2,70],19:[2,70],20:[2,70],21:[2,70],22:[2,70],23:[2,70],31:[2,70],32:[2,70],34:[2,70],35:[2,70],38:[2,70],39:[2,70],41:[2,70],44:[2,70],53:[2,70],54:[2,70],55:[2,70],56:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],61:[2,70],62:[2,70],63:[2,70],64:[2,70],67:[2,70],68:[2,70]},{41:[1,111],44:[1,147]},{5:[2,44],29:[2,44],34:[2,44],36:[2,44],40:[2,44],42:[2,44],43:[2,44],45:[2,44],46:[2,44],47:[2,44],49:[2,44],50:[1,148],52:[2,44],54:[2,44],65:[2,44],69:[2,44],70:[2,44],71:[2,44],72:[2,44],73:[2,44],74:[2,44]},{4:149,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:23,29:[1,30],34:[1,21],36:[1,17],40:[1,18],42:[1,12],43:[1,20],45:[1,13],46:[1,14],47:[1,16],49:[1,15],52:[1,150],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{5:[2,48],29:[2,48],34:[2,48],36:[2,48],40:[2,48],42:[2,48],43:[2,48],45:[2,48],46:[2,48],47:[2,48],49:[2,48],50:[2,48],52:[2,48],54:[2,48],65:[2,48],69:[2,48],70:[2,48],71:[2,48],72:[2,48],73:[2,48],74:[2,48]},{5:[2,43],29:[2,43],34:[2,43],36:[2,43],40:[2,43],42:[2,43],43:[2,43],45:[2,43],46:[2,43],47:[2,43],49:[2,43],50:[2,43],52:[2,43],54:[2,43],65:[2,43],69:[2,43],70:[2,43],71:[2,43],72:[2,43],73:[2,43],74:[2,43]},{15:151,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{8:[2,34],34:[1,130],39:[1,152]},{24:153,25:[1,119],26:[1,120],27:[1,121],28:[1,122],29:[1,123],30:[1,124]},{15:154,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{34:[1,130],39:[1,155]},{8:[2,36],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{8:[2,25],34:[2,25],39:[2,25]},{8:[2,71],17:[2,71],18:[2,71],19:[2,71],20:[2,71],21:[2,71],22:[2,71],23:[2,71],31:[2,71],32:[2,71],34:[2,71],35:[2,71],38:[2,71],39:[2,71],41:[2,71],44:[2,71],53:[2,71],54:[2,71],55:[2,71],56:[2,71],57:[2,71],58:[2,71],59:[2,71],60:[2,71],61:[2,71],62:[2,71],63:[2,71],64:[2,71],67:[2,71],68:[2,71]},{6:138,7:4,9:5,10:6,11:157,12:8,13:9,14:10,15:11,16:23,29:[1,30],34:[1,21],36:[1,17],40:[1,18],42:[1,12],43:[1,20],45:[1,13],46:[1,14],47:[1,16],48:156,49:[1,15],51:[1,137],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{6:32,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:23,29:[1,30],34:[1,21],36:[1,17],40:[1,18],42:[1,12],43:[1,20],45:[1,13],46:[1,14],47:[1,16],49:[1,15],52:[1,158],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{5:[2,49],29:[2,49],34:[2,49],36:[2,49],40:[2,49],42:[2,49],43:[2,49],45:[2,49],46:[2,49],47:[2,49],49:[2,49],50:[2,49],52:[2,49],54:[2,49],65:[2,49],69:[2,49],70:[2,49],71:[2,49],72:[2,49],73:[2,49],74:[2,49]},{8:[2,27],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{15:159,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{32:[1,160]},{8:[2,31],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{15:161,16:23,29:[1,30],34:[1,21],43:[1,20],54:[1,22],65:[1,19],69:[1,24],70:[1,25],71:[1,26],72:[1,27],73:[1,28],74:[1,29]},{5:[2,45],29:[2,45],34:[2,45],36:[2,45],40:[2,45],42:[2,45],43:[2,45],45:[2,45],46:[2,45],47:[2,45],49:[2,45],50:[2,45],52:[2,45],54:[2,45],65:[2,45],69:[2,45],70:[2,45],71:[2,45],72:[2,45],73:[2,45],74:[2,45]},{5:[2,46],29:[2,46],34:[2,46],36:[2,46],40:[2,46],42:[2,46],43:[2,46],45:[2,46],46:[2,46],47:[2,46],49:[2,46],50:[2,46],52:[2,46],54:[2,46],65:[2,46],69:[2,46],70:[2,46],71:[2,46],72:[2,46],73:[2,46],74:[2,46]},{5:[2,47],29:[2,47],34:[2,47],36:[2,47],40:[2,47],42:[2,47],43:[2,47],45:[2,47],46:[2,47],47:[2,47],49:[2,47],50:[2,47],52:[2,47],54:[2,47],65:[2,47],69:[2,47],70:[2,47],71:[2,47],72:[2,47],73:[2,47],74:[2,47]},{8:[2,33],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]},{8:[2,24],32:[2,24],34:[2,24],39:[2,24]},{8:[2,35],17:[1,57],18:[1,58],19:[1,59],20:[1,60],21:[1,61],22:[1,62],23:[1,63],31:[1,51],32:[1,48],34:[1,54],53:[1,40],54:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,49],62:[1,50],63:[1,52],64:[1,53],67:[1,55],68:[1,56]}],
        defaultActions: {13:[2,41],14:[2,42],31:[2,1],115:[2,40]},
        parseError: function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},
        parse: function parse(input) {
            var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            this.lexer.setInput(input);
            this.lexer.yy = this.yy;
            this.yy.lexer = this.lexer;
            this.yy.parser = this;
            if (typeof this.lexer.yylloc == 'undefined') {
                this.lexer.yylloc = {};
            }
            var yyloc = this.lexer.yylloc;
            lstack.push(yyloc);
            var ranges = this.lexer.options && this.lexer.options.ranges;
            if (typeof this.yy.parseError === 'function') {
                this.parseError = this.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            function lex() {
                var token;
                token = self.lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            }
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (this.lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: this.lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: this.lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(this.lexer.yytext);
                        lstack.push(this.lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = this.lexer.yyleng;
                            yytext = this.lexer.yytext;
                            yylineno = this.lexer.yylineno;
                            yyloc = this.lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            this.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }};
    /* generated by jison-lex 0.2.1 */
    var lexer = (function(){
        var lexer = {

            EOF:1,

            parseError:function parseError(str,hash){if(this.yy.parser){this.yy.parser.parseError(str,hash)}else{throw new Error(str)}},

// resets the lexer, sets new input
            setInput:function(input){this._input=input;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},

// consumes and returns one char from the input
            input:function(){var ch=this._input[0];this.yytext+=ch;this.yyleng++;this.offset++;this.match+=ch;this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return ch},

// unshifts one char (or a string) into the input
            unput:function(ch){var len=ch.length;var lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-len-1);this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(lines.length-1){this.yylineno-=lines.length-1}var r=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len};if(this.options.ranges){this.yylloc.range=[r[0],r[0]+this.yyleng-len]}this.yyleng=this.yytext.length;return this},

// When called from action, caches matched text and appends it on next action
            more:function(){this._more=true;return this},

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject:function(){if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},

// retain first n characters of the match
            less:function(n){this.unput(this.match.slice(n))},

// displays already matched input, i.e. for error messages
            pastInput:function(){var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},

// displays upcoming input, i.e. for error messages
            upcomingInput:function(){var next=this.match;if(next.length<20){next+=this._input.substr(0,20-next.length)}return(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},

// displays the character position where the lexing error occurred, i.e. for error messages
            showPosition:function(){var pre=this.pastInput();var c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},

// test the lexed token: return FALSE when not a match, otherwise return token
            test_match:function(match,indexed_rule){var token,lines,backup;if(this.options.backtrack_lexer){backup={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){backup.yylloc.range=this.yylloc.range.slice(0)}}lines=match[0].match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno+=lines.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length};this.yytext+=match[0];this.match+=match[0];this.matches=match;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(match[0].length);this.matched+=match[0];token=this.performAction.call(this,this.yy,this,indexed_rule,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(token){return token}else if(this._backtrack){for(var k in backup){this[k]=backup[k]}return false}return false},

// return next match in input
            next:function(){if(this.done){return this.EOF}if(!this._input){this.done=true}var token,match,tempMatch,index;if(!this._more){this.yytext="";this.match=""}var rules=this._currentRules();for(var i=0;i<rules.length;i++){tempMatch=this._input.match(this.rules[rules[i]]);if(tempMatch&&(!match||tempMatch[0].length>match[0].length)){match=tempMatch;index=i;if(this.options.backtrack_lexer){token=this.test_match(tempMatch,rules[i]);if(token!==false){return token}else if(this._backtrack){match=false;continue}else{return false}}else if(!this.options.flex){break}}}if(match){token=this.test_match(match,rules[index]);if(token!==false){return token}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},

// return next match that has a token
            lex:function lex(){var r=this.next();if(r){return r}else{return this.lex()}},

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin:function begin(condition){this.conditionStack.push(condition)},

// pop the previously active lexer condition state off the condition stack
            popState:function popState(){var n=this.conditionStack.length-1;if(n>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},

// produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules:function _currentRules(){if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState:function topState(n){n=this.conditionStack.length-1-Math.abs(n||0);if(n>=0){return this.conditionStack[n]}else{return"INITIAL"}},

// alias for begin(condition)
            pushState:function pushState(condition){this.begin(condition)},

// return the number of states currently on the stack
            stateStackSize:function stateStackSize(){return this.conditionStack.length},
            options: {},
            performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
            ) {

                var YYSTATE=YY_START;
                switch($avoiding_name_collisions) {
                    case 0:

                        this.begin('no joda man xD');

                        break;
                    case 1:

                        this.popState();

                        break;
                    case 2:/* skip comment content*/
                        break;
                    case 3:return 71;
                        break;
                    case 4:return 72;
                        break;
                    case 5:return 73;
                        break;
                    case 6:return 74;
                        break;
                    case 7:return 25;
                        break;
                    case 8:return 26;
                        break;
                    case 9:return 27;
                        break;
                    case 10:return 28;
                        break;
                    case 11:return 30;
                        break;
                    case 12:return 40;
                        break;
                    case 13:return 36;
                        break;
                    case 14:return 45;
                        break;
                    case 15:return 46;
                        break;
                    case 16:return 42;
                        break;
                    case 17:return 49;
                        break;
                    case 18:return 50;
                        break;
                    case 19:return 47;
                        break;
                    case 20:/* skip whitespace */
                        break;
                    case 21:return 69
                        break;
                    case 22:return 70;
                        break;
                    case 23:return 17
                        break;
                    case 24:return 18
                        break;
                    case 25:return 19
                        break;
                    case 26:return 20
                        break;
                    case 27:return 21
                        break;
                    case 28:return 22
                        break;
                    case 29:return 23
                        break;
                    case 30:return 55
                        break;
                    case 31:return 56
                        break;
                    case 32:return 54
                        break;
                    case 33:return 53
                        break;
                    case 34:return 58
                        break;
                    case 35:return 57
                        break;
                    case 36:return 43
                        break;
                    case 37:return 44
                        break;
                    case 38:return 8
                        break;
                    case 39:return 41
                        break;
                    case 40:return 38
                        break;
                    case 41:return 59
                        break;
                    case 42:return 60
                        break;
                    case 43:return 39
                        break;
                    case 44:return 61
                        break;
                    case 45:return 62
                        break;
                    case 46:return 32
                        break;
                    case 47:return 31
                        break;
                    case 48:return 63
                        break;
                    case 49:return 64
                        break;
                    case 50:return 65
                        break;
                    case 51:return 67
                        break;
                    case 52:return 68
                        break;
                    case 53:return 34
                        break;
                    case 54:return 35
                        break;
                    case 55:return 51
                        break;
                    case 56:return 52
                        break;
                    case 57:return 31
                        break;
                    case 58:return 32
                        break;
                    case 59:return 29;
                        break;
                    case 60:return 5
                        break;
                    case 61:return 'INVALID'
                        break;
                }
            },
            rules: [/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:null\b)/,/^(?:undefined\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:any\b)/,/^(?:array\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:console\.log\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:(("(([^"\\^'\\]|((\\[btnfr"'\\])))+)?")|('(([^"\\^'\\]|((\\[btnfr"'\\])))+)?')))/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\?)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:<)/,/^(?:>)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
            conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true},"INITIAL":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61],"inclusive":true}}
        };
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser () {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = parser;
    exports.Parser = parser.Parser;
    exports.parse = function () { return parser.parse.apply(parser, arguments); };
    exports.main = function commonjsMain(args){if(!args[1]){console.log("Usage: "+args[0]+" FILE");process.exit(1)}var source=require("fs").readFileSync(require("path").normalize(args[1]),"utf8");return exports.parser.parse(source)};
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}