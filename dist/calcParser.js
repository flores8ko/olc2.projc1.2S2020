/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var calc = (function(){
    var parser = {trace: function trace(){},
        yy: {},
        symbols_: {"error":2,"expressions":3,"sentences":4,"EOF":5,"sentence":6,"consoleLog":7,";":8,"breakControl":9,"continueControl":10,"ifControl":11,"whileControl":12,"doWhileControl":13,"letDeclarations":14,"asigna":15,"e":16,"increment":17,"+=":18,"-=":19,"*=":20,"/=":21,"%=":22,"++":23,"--":24,"varType":25,"NUMBER_TYPE":26,"STRING_TYPE":27,"BOOLEAN_TYPE":28,"ANY_TYPE":29,"IDENTIFIER":30,"ARRAY_TYPE":31,"<":32,">":33,"corchetes":34,"[":35,"]":36,"LET":37,"idList":38,":":39,"=":40,"CONST":41,",":42,"console.log":43,"(":44,")":45,"break":46,"continue":47,"while":48,"ifBody":49,"do":50,"if":51,"else":52,"{":53,"}":54,"+":55,"-":56,"*":57,"/":58,"%":59,"^":60,"==":61,"!=":62,">=":63,"<=":64,"||":65,"&&":66,"!":67,"eList":68,"?":69,".":70,"NUMBER":71,"STRING":72,"NULL":73,"UNDEFINED":74,"FALSE":75,"TRUE":76,"$accept":0,"$end":1},
        terminals_: {2:"error",5:"EOF",8:";",18:"+=",19:"-=",20:"*=",21:"/=",22:"%=",23:"++",24:"--",26:"NUMBER_TYPE",27:"STRING_TYPE",28:"BOOLEAN_TYPE",29:"ANY_TYPE",30:"IDENTIFIER",31:"ARRAY_TYPE",32:"<",33:">",35:"[",36:"]",37:"LET",39:":",40:"=",41:"CONST",42:",",43:"console.log",44:"(",45:")",46:"break",47:"continue",48:"while",50:"do",51:"if",52:"else",53:"{",54:"}",55:"+",56:"-",57:"*",58:"/",59:"%",60:"^",61:"==",62:"!=",63:">=",64:"<=",65:"||",66:"&&",67:"!",69:"?",70:".",71:"NUMBER",72:"STRING",73:"NULL",74:"UNDEFINED",75:"FALSE",76:"TRUE"},
        productions_: [0,[3,2],[4,2],[4,1],[6,2],[6,2],[6,2],[6,1],[6,1],[6,1],[6,2],[6,2],[6,2],[17,3],[17,3],[17,3],[17,3],[17,3],[17,2],[17,2],[25,1],[25,1],[25,1],[25,1],[25,1],[25,4],[34,3],[34,2],[14,6],[14,4],[14,4],[14,2],[14,6],[14,4],[14,7],[14,5],[14,7],[14,5],[38,3],[38,1],[15,3],[7,4],[9,1],[10,1],[12,5],[13,6],[13,7],[11,5],[11,7],[11,7],[49,3],[49,1],[49,2],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,3],[16,2],[16,3],[16,2],[16,3],[16,4],[16,5],[16,5],[16,6],[16,3],[16,2],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[16,1],[68,3],[68,1]],
        performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */
        ) {
            /* this == yyval */

            var $0 = $$.length - 1;
            switch (yystate) {
                case 1:return $$[$0-1];
                    break;
                case 2: $$[$0-1].push($$[$0]); this.$ = $$[$0-1];
                    break;
                case 3: this.$ = [$$[$0]];
                    break;
                case 4:this.$ = $$[$0-1];
                    break;
                case 5: this.$ = $$[$0-1];
                    break;
                case 6: this.$ = $$[$0-1];
                    break;
                case 7: this.$ = $$[$0];
                    break;
                case 8: this.$ = $$[$0];
                    break;
                case 9: this.$ = $$[$0];
                    break;
                case 10: this.$ = $$[$0-1];
                    break;
                case 11: this.$ = $$[$0-1];
                    break;
                case 12: this.$ = $$[$0-1];
                    break;
                case 13: this.$ = new ast.ReAsignAddNode($$[$0-2], $$[$0]);
                    break;
                case 14: this.$ = new ast.ReAsignSubNode($$[$0-2], $$[$0]);
                    break;
                case 15: this.$ = new ast.ReAsignMulNode($$[$0-2], $$[$0]);
                    break;
                case 16: this.$ = new ast.ReAsignDivNode($$[$0-2], $$[$0]);
                    break;
                case 17: this.$ = new ast.ReAsignModNode($$[$0-2], $$[$0]);
                    break;
                case 18: this.$ = new ast.ReAddNode($$[$0-1]);
                    break;
                case 19: this.$ = new ast.ReSubNode($$[$0-1]);
                    break;
                case 20: this.$ = $$[$0];
                    break;
                case 21: this.$ = $$[$0];
                    break;
                case 22: this.$ = $$[$0];
                    break;
                case 23: this.$ = $$[$0];
                    break;
                case 24: this.$ = $$[$0];
                    break;
                case 25: this.$ = $$[$0-3];
                    break;
                case 28:this.$ = new ast.DeclareVarListNode($$[$0-2], $$[$0-4], $$[$0]);
                    break;
                case 29: this.$ = new ast.DeclareVarListNode($$[$0], $$[$0-2]);
                    break;
                case 30: this.$ = new ast.DeclareVarListNode("", $$[$0-2], $$[$0]);
                    break;
                case 31:this.$ = new ast.DeclareVarListNode("", $$[$0]);
                    break;
                case 32:this.$ = new ast.DeclareVarListNode($$[$0-2], [new ast.DeclareVarNode($$[$0-4])], $$[$0], true);
                    break;
                case 33: this.$ = new ast.DeclareVarListNode("", [new ast.DeclareVarNode($$[$0-2])], $$[$0], true);
                    break;
                case 34:this.$ = new ast.DeclareVarListNode('ARRAY', $$[$0-5], $$[$0]);
                    break;
                case 35: this.$ = new ast.DeclareVarListNode('ARRAY', $$[$0-3]);
                    break;
                case 36:this.$ = new ast.DeclareVarListNode('ARRAY', [new ast.DeclareVarNode($$[$0-5])], $$[$0], true);
                    break;
                case 37: this.$ = new ast.DeclareVarListNode("", [new ast.DeclareVarNode($$[$0-3])], $$[$0], true);
                    break;
                case 38: $$[$0-2].push(new ast.DeclareVarNode($$[$0])); this.$ = $$[$0-2];
                    break;
                case 39: this.$ = [new ast.DeclareVarNode($$[$0])]
                    break;
                case 40: this.$ = new ast.AsignNode($$[$0-2], $$[$0]);
                    break;
                case 41: this.$ = new ast.ConsoleLogNode($$[$0-1]);
                    break;
                case 42: this.$ = new ast.BreakNode();
                    break;
                case 43: this.$ = new ast.ContinueNode();
                    break;
                case 44: this.$ = new ast.WhileNode($$[$0-2], $$[$0]);
                    break;
                case 45: this.$ = new ast.DoWhileNode($$[$0-1], $$[$0-4]);
                    break;
                case 46: this.$ = new ast.DoWhileNode($$[$0-2], $$[$0-5]);
                    break;
                case 47: this.$ = new ast.IfNode($$[$0-2], $$[$0], []);
                    break;
                case 48: this.$ = new ast.IfNode($$[$0-4], $$[$0-2], $$[$0]);
                    break;
                case 49: this.$ = new ast.IfNode($$[$0-4], $$[$0-2], [$$[$0]]);
                    break;
                case 50: this.$ = $$[$0-1];
                    break;
                case 51:this.$ = [$$[$0]];
                    break;
                case 52:this.$ = [];
                    break;
                case 53:this.$ = new ast.SumNode($$[$0-2],$$[$0]);
                    break;
                case 54:this.$ = new ast.SubNode($$[$0-2], $$[$0]);
                    break;
                case 55:this.$ = new ast.MulNode($$[$0-2],$$[$0]);
                    break;
                case 56:this.$ = new ast.DivNode($$[$0-2],$$[$0]);
                    break;
                case 57:this.$ = new ast.ModNode($$[$0-2],$$[$0]);
                    break;
                case 58:this.$ = new ast.ExpNode($$[$0-2], $$[$0]);
                    break;
                case 59:this.$ = new ast.EqNode($$[$0-2], $$[$0]);
                    break;
                case 60:this.$ = new ast.DifNode($$[$0-2], $$[$0]);
                    break;
                case 61:this.$ = new ast.HigherNode($$[$0-2], $$[$0]);
                    break;
                case 62:this.$ = new ast.HigherEqNode($$[$0-2], $$[$0]);
                    break;
                case 63:this.$ = new ast.MinorEqNode($$[$0-2], $$[$0]);
                    break;
                case 64:this.$ = new ast.MinorNode($$[$0-2], $$[$0]);
                    break;
                case 65:this.$ = new ast.OrNode($$[$0-2], $$[$0]);
                    break;
                case 66:this.$ = new ast.AndNode($$[$0-2], $$[$0]);
                    break;
                case 67:this.$ = new ast.NotNode($$[$0]);
                    break;
                case 68:this.$ = $$[$0-1];
                    break;
                case 69: this.$ = new ast.CreateArrayNode([]);
                    break;
                case 70: this.$ = new ast.CreateArrayNode($$[$0-1]);
                    break;
                case 71: this.$ = new ast.CreateArrVarNode($$[$0-3], $$[$0-1]);
                    break;
                case 72: this.$ = new ast.SentenceTernaryNode($$[$0-4], $$[$0-2], $$[$0]);
                    break;
                case 73: this.$ = new ast.CreateObjFunNode($$[$0-4], $$[$0-2], []);
                    break;
                case 74: this.$ = new ast.CreateObjFunNode($$[$0-5], $$[$0-3], $$[$0-1]);
                    break;
                case 75: this.$ = new ast.CreateObjVarNode($$[$0-2], $$[$0]);
                    break;
                case 76:this.$ = new ast.MulNode($$[$0], new ast.NumberNode(-1));
                    break;
                case 77: this.$ = $$[$0]
                    break;
                case 78:this.$ = new ast.NumberNode(Number(yytext));
                    break;
                case 79:this.$ = new ast.StringNode(yytext);
                    break;
                case 80: this.$ = new ast.NullNode();
                    break;
                case 81: this.$ = new ast.UndefinedNode();
                    break;
                case 82:this.$ = new ast.BooleanNode(false);
                    break;
                case 83:this.$ = new ast.BooleanNode(true);
                    break;
                case 84: this.$ = new ast.CreateIdVarNode($$[$0]);
                    break;
                case 85:$$[$0-2].push($$[$0]); this.$ = $$[$0-2];
                    break;
                case 86:this.$ = [$$[$0]]
                    break;
            }
        },
        table: [{3:1,4:2,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:25,30:[1,32],35:[1,23],37:[1,19],41:[1,20],43:[1,13],44:[1,22],46:[1,14],47:[1,15],48:[1,17],50:[1,18],51:[1,16],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{1:[3]},{5:[1,33],6:34,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:25,30:[1,32],35:[1,23],37:[1,19],41:[1,20],43:[1,13],44:[1,22],46:[1,14],47:[1,15],48:[1,17],50:[1,18],51:[1,16],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{5:[2,3],30:[2,3],35:[2,3],37:[2,3],41:[2,3],43:[2,3],44:[2,3],46:[2,3],47:[2,3],48:[2,3],50:[2,3],51:[2,3],54:[2,3],56:[2,3],67:[2,3],71:[2,3],72:[2,3],73:[2,3],74:[2,3],75:[2,3],76:[2,3]},{8:[1,35]},{8:[1,36]},{8:[1,37]},{5:[2,7],30:[2,7],35:[2,7],37:[2,7],41:[2,7],43:[2,7],44:[2,7],46:[2,7],47:[2,7],48:[2,7],50:[2,7],51:[2,7],52:[2,7],54:[2,7],56:[2,7],67:[2,7],71:[2,7],72:[2,7],73:[2,7],74:[2,7],75:[2,7],76:[2,7]},{5:[2,8],30:[2,8],35:[2,8],37:[2,8],41:[2,8],43:[2,8],44:[2,8],46:[2,8],47:[2,8],48:[2,8],50:[2,8],51:[2,8],52:[2,8],54:[2,8],56:[2,8],67:[2,8],71:[2,8],72:[2,8],73:[2,8],74:[2,8],75:[2,8],76:[2,8]},{5:[2,9],30:[2,9],35:[2,9],37:[2,9],41:[2,9],43:[2,9],44:[2,9],46:[2,9],47:[2,9],48:[2,9],50:[2,9],51:[2,9],52:[2,9],54:[2,9],56:[2,9],67:[2,9],71:[2,9],72:[2,9],73:[2,9],74:[2,9],75:[2,9],76:[2,9]},{8:[1,38]},{8:[1,39]},{8:[1,40],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],40:[1,41],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{44:[1,66]},{8:[2,42]},{8:[2,43]},{44:[1,67]},{44:[1,68]},{6:71,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:25,30:[1,32],35:[1,23],37:[1,19],41:[1,20],43:[1,13],44:[1,22],46:[1,14],47:[1,15],48:[1,17],49:69,50:[1,18],51:[1,16],53:[1,70],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{30:[1,73],38:72},{30:[1,74]},{16:75,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:76,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:79,17:25,30:[1,32],35:[1,23],36:[1,77],44:[1,22],56:[1,24],67:[1,21],68:78,71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:80,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{8:[2,77],18:[2,77],19:[2,77],20:[2,77],21:[2,77],22:[2,77],23:[2,77],24:[2,77],32:[2,77],33:[2,77],35:[2,77],36:[2,77],39:[2,77],40:[2,77],42:[2,77],45:[2,77],55:[2,77],56:[2,77],57:[2,77],58:[2,77],59:[2,77],60:[2,77],61:[2,77],62:[2,77],63:[2,77],64:[2,77],65:[2,77],66:[2,77],69:[2,77],70:[2,77]},{8:[2,78],18:[2,78],19:[2,78],20:[2,78],21:[2,78],22:[2,78],23:[2,78],24:[2,78],32:[2,78],33:[2,78],35:[2,78],36:[2,78],39:[2,78],40:[2,78],42:[2,78],45:[2,78],55:[2,78],56:[2,78],57:[2,78],58:[2,78],59:[2,78],60:[2,78],61:[2,78],62:[2,78],63:[2,78],64:[2,78],65:[2,78],66:[2,78],69:[2,78],70:[2,78]},{8:[2,79],18:[2,79],19:[2,79],20:[2,79],21:[2,79],22:[2,79],23:[2,79],24:[2,79],32:[2,79],33:[2,79],35:[2,79],36:[2,79],39:[2,79],40:[2,79],42:[2,79],45:[2,79],55:[2,79],56:[2,79],57:[2,79],58:[2,79],59:[2,79],60:[2,79],61:[2,79],62:[2,79],63:[2,79],64:[2,79],65:[2,79],66:[2,79],69:[2,79],70:[2,79]},{8:[2,80],18:[2,80],19:[2,80],20:[2,80],21:[2,80],22:[2,80],23:[2,80],24:[2,80],32:[2,80],33:[2,80],35:[2,80],36:[2,80],39:[2,80],40:[2,80],42:[2,80],45:[2,80],55:[2,80],56:[2,80],57:[2,80],58:[2,80],59:[2,80],60:[2,80],61:[2,80],62:[2,80],63:[2,80],64:[2,80],65:[2,80],66:[2,80],69:[2,80],70:[2,80]},{8:[2,81],18:[2,81],19:[2,81],20:[2,81],21:[2,81],22:[2,81],23:[2,81],24:[2,81],32:[2,81],33:[2,81],35:[2,81],36:[2,81],39:[2,81],40:[2,81],42:[2,81],45:[2,81],55:[2,81],56:[2,81],57:[2,81],58:[2,81],59:[2,81],60:[2,81],61:[2,81],62:[2,81],63:[2,81],64:[2,81],65:[2,81],66:[2,81],69:[2,81],70:[2,81]},{8:[2,82],18:[2,82],19:[2,82],20:[2,82],21:[2,82],22:[2,82],23:[2,82],24:[2,82],32:[2,82],33:[2,82],35:[2,82],36:[2,82],39:[2,82],40:[2,82],42:[2,82],45:[2,82],55:[2,82],56:[2,82],57:[2,82],58:[2,82],59:[2,82],60:[2,82],61:[2,82],62:[2,82],63:[2,82],64:[2,82],65:[2,82],66:[2,82],69:[2,82],70:[2,82]},{8:[2,83],18:[2,83],19:[2,83],20:[2,83],21:[2,83],22:[2,83],23:[2,83],24:[2,83],32:[2,83],33:[2,83],35:[2,83],36:[2,83],39:[2,83],40:[2,83],42:[2,83],45:[2,83],55:[2,83],56:[2,83],57:[2,83],58:[2,83],59:[2,83],60:[2,83],61:[2,83],62:[2,83],63:[2,83],64:[2,83],65:[2,83],66:[2,83],69:[2,83],70:[2,83]},{8:[2,84],18:[2,84],19:[2,84],20:[2,84],21:[2,84],22:[2,84],23:[2,84],24:[2,84],32:[2,84],33:[2,84],35:[2,84],36:[2,84],39:[2,84],40:[2,84],42:[2,84],45:[2,84],55:[2,84],56:[2,84],57:[2,84],58:[2,84],59:[2,84],60:[2,84],61:[2,84],62:[2,84],63:[2,84],64:[2,84],65:[2,84],66:[2,84],69:[2,84],70:[2,84]},{1:[2,1]},{5:[2,2],30:[2,2],35:[2,2],37:[2,2],41:[2,2],43:[2,2],44:[2,2],46:[2,2],47:[2,2],48:[2,2],50:[2,2],51:[2,2],54:[2,2],56:[2,2],67:[2,2],71:[2,2],72:[2,2],73:[2,2],74:[2,2],75:[2,2],76:[2,2]},{5:[2,4],30:[2,4],35:[2,4],37:[2,4],41:[2,4],43:[2,4],44:[2,4],46:[2,4],47:[2,4],48:[2,4],50:[2,4],51:[2,4],52:[2,4],54:[2,4],56:[2,4],67:[2,4],71:[2,4],72:[2,4],73:[2,4],74:[2,4],75:[2,4],76:[2,4]},{5:[2,5],30:[2,5],35:[2,5],37:[2,5],41:[2,5],43:[2,5],44:[2,5],46:[2,5],47:[2,5],48:[2,5],50:[2,5],51:[2,5],52:[2,5],54:[2,5],56:[2,5],67:[2,5],71:[2,5],72:[2,5],73:[2,5],74:[2,5],75:[2,5],76:[2,5]},{5:[2,6],30:[2,6],35:[2,6],37:[2,6],41:[2,6],43:[2,6],44:[2,6],46:[2,6],47:[2,6],48:[2,6],50:[2,6],51:[2,6],52:[2,6],54:[2,6],56:[2,6],67:[2,6],71:[2,6],72:[2,6],73:[2,6],74:[2,6],75:[2,6],76:[2,6]},{5:[2,10],30:[2,10],35:[2,10],37:[2,10],41:[2,10],43:[2,10],44:[2,10],46:[2,10],47:[2,10],48:[2,10],50:[2,10],51:[2,10],52:[2,10],54:[2,10],56:[2,10],67:[2,10],71:[2,10],72:[2,10],73:[2,10],74:[2,10],75:[2,10],76:[2,10]},{5:[2,11],30:[2,11],35:[2,11],37:[2,11],41:[2,11],43:[2,11],44:[2,11],46:[2,11],47:[2,11],48:[2,11],50:[2,11],51:[2,11],52:[2,11],54:[2,11],56:[2,11],67:[2,11],71:[2,11],72:[2,11],73:[2,11],74:[2,11],75:[2,11],76:[2,11]},{5:[2,12],30:[2,12],35:[2,12],37:[2,12],41:[2,12],43:[2,12],44:[2,12],46:[2,12],47:[2,12],48:[2,12],50:[2,12],51:[2,12],52:[2,12],54:[2,12],56:[2,12],67:[2,12],71:[2,12],72:[2,12],73:[2,12],74:[2,12],75:[2,12],76:[2,12]},{16:81,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:82,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:83,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:84,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:85,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:86,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:87,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:88,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:89,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:90,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:91,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:92,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:93,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:94,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:95,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:96,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:97,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{30:[1,98]},{16:99,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:100,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:101,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:102,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:103,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{8:[2,18],18:[2,18],19:[2,18],20:[2,18],21:[2,18],22:[2,18],23:[2,18],24:[2,18],32:[2,18],33:[2,18],35:[2,18],36:[2,18],39:[2,18],40:[2,18],42:[2,18],45:[2,18],55:[2,18],56:[2,18],57:[2,18],58:[2,18],59:[2,18],60:[2,18],61:[2,18],62:[2,18],63:[2,18],64:[2,18],65:[2,18],66:[2,18],69:[2,18],70:[2,18]},{8:[2,19],18:[2,19],19:[2,19],20:[2,19],21:[2,19],22:[2,19],23:[2,19],24:[2,19],32:[2,19],33:[2,19],35:[2,19],36:[2,19],39:[2,19],40:[2,19],42:[2,19],45:[2,19],55:[2,19],56:[2,19],57:[2,19],58:[2,19],59:[2,19],60:[2,19],61:[2,19],62:[2,19],63:[2,19],64:[2,19],65:[2,19],66:[2,19],69:[2,19],70:[2,19]},{16:104,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:105,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:106,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{48:[1,107]},{4:108,6:3,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:25,30:[1,32],35:[1,23],37:[1,19],41:[1,20],43:[1,13],44:[1,22],46:[1,14],47:[1,15],48:[1,17],50:[1,18],51:[1,16],54:[1,109],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{5:[2,51],30:[2,51],35:[2,51],37:[2,51],41:[2,51],43:[2,51],44:[2,51],46:[2,51],47:[2,51],48:[2,51],50:[2,51],51:[2,51],52:[2,51],54:[2,51],56:[2,51],67:[2,51],71:[2,51],72:[2,51],73:[2,51],74:[2,51],75:[2,51],76:[2,51]},{8:[2,31],39:[1,110],40:[1,111],42:[1,112]},{8:[2,39],39:[2,39],40:[2,39],42:[2,39]},{34:115,35:[1,116],39:[1,113],40:[1,114]},{8:[2,67],18:[2,67],19:[2,67],20:[2,67],21:[2,67],22:[2,67],23:[1,64],24:[1,65],32:[2,67],33:[2,67],35:[1,56],36:[2,67],39:[2,67],40:[2,67],42:[2,67],45:[2,67],55:[2,67],56:[2,67],57:[2,67],58:[2,67],59:[2,67],60:[2,67],61:[2,67],62:[2,67],63:[2,67],64:[2,67],65:[2,67],66:[2,67],69:[2,67],70:[1,58]},{18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],45:[1,117],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{8:[2,69],18:[2,69],19:[2,69],20:[2,69],21:[2,69],22:[2,69],23:[2,69],24:[2,69],32:[2,69],33:[2,69],35:[2,69],36:[2,69],39:[2,69],40:[2,69],42:[2,69],45:[2,69],55:[2,69],56:[2,69],57:[2,69],58:[2,69],59:[2,69],60:[2,69],61:[2,69],62:[2,69],63:[2,69],64:[2,69],65:[2,69],66:[2,69],69:[2,69],70:[2,69]},{36:[1,118],42:[1,119]},{18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],36:[2,86],42:[2,86],45:[2,86],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{8:[2,76],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[2,76],33:[2,76],35:[1,56],36:[2,76],39:[2,76],40:[2,76],42:[2,76],45:[2,76],55:[2,76],56:[2,76],57:[2,76],58:[2,76],59:[2,76],60:[2,76],61:[2,76],62:[2,76],63:[2,76],64:[2,76],65:[2,76],66:[2,76],69:[2,76],70:[1,58]},{8:[2,40],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{8:[2,53],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[2,53],33:[2,53],35:[1,56],36:[2,53],39:[2,53],40:[2,53],42:[2,53],45:[2,53],55:[2,53],56:[2,53],57:[1,44],58:[1,45],59:[1,46],60:[2,53],61:[2,53],62:[2,53],63:[2,53],64:[2,53],65:[2,53],66:[2,53],69:[2,53],70:[1,58]},{8:[2,54],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[2,54],33:[2,54],35:[1,56],36:[2,54],39:[2,54],40:[2,54],42:[2,54],45:[2,54],55:[2,54],56:[2,54],57:[1,44],58:[1,45],59:[1,46],60:[2,54],61:[2,54],62:[2,54],63:[2,54],64:[2,54],65:[2,54],66:[2,54],69:[2,54],70:[1,58]},{8:[2,55],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[2,55],33:[2,55],35:[1,56],36:[2,55],39:[2,55],40:[2,55],42:[2,55],45:[2,55],55:[2,55],56:[2,55],57:[2,55],58:[2,55],59:[2,55],60:[2,55],61:[2,55],62:[2,55],63:[2,55],64:[2,55],65:[2,55],66:[2,55],69:[2,55],70:[1,58]},{8:[2,56],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[2,56],33:[2,56],35:[1,56],36:[2,56],39:[2,56],40:[2,56],42:[2,56],45:[2,56],55:[2,56],56:[2,56],57:[2,56],58:[2,56],59:[2,56],60:[2,56],61:[2,56],62:[2,56],63:[2,56],64:[2,56],65:[2,56],66:[2,56],69:[2,56],70:[1,58]},{8:[2,57],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[2,57],33:[2,57],35:[1,56],36:[2,57],39:[2,57],40:[2,57],42:[2,57],45:[2,57],55:[2,57],56:[2,57],57:[2,57],58:[2,57],59:[2,57],60:[2,57],61:[2,57],62:[2,57],63:[2,57],64:[2,57],65:[2,57],66:[2,57],69:[2,57],70:[1,58]},{8:[2,58],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],36:[2,58],39:[2,58],40:[2,58],42:[2,58],45:[2,58],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[2,58],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[2,58],66:[2,58],69:[2,58],70:[1,58]},{8:[2,59],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],36:[2,59],39:[2,59],40:[2,59],42:[2,59],45:[2,59],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[2,59],61:[2,59],62:[2,59],63:[1,51],64:[1,52],65:[2,59],66:[2,59],69:[2,59],70:[1,58]},{8:[2,60],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],36:[2,60],39:[2,60],40:[2,60],42:[2,60],45:[2,60],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[2,60],61:[2,60],62:[2,60],63:[1,51],64:[1,52],65:[2,60],66:[2,60],69:[2,60],70:[1,58]},{8:[2,61],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[2,61],33:[2,61],35:[1,56],36:[2,61],39:[2,61],40:[2,61],42:[2,61],45:[2,61],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[2,61],61:[2,61],62:[2,61],63:[2,61],64:[2,61],65:[2,61],66:[2,61],69:[2,61],70:[1,58]},{8:[2,62],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[2,62],33:[2,62],35:[1,56],36:[2,62],39:[2,62],40:[2,62],42:[2,62],45:[2,62],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[2,62],61:[2,62],62:[2,62],63:[2,62],64:[2,62],65:[2,62],66:[2,62],69:[2,62],70:[1,58]},{8:[2,63],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[2,63],33:[2,63],35:[1,56],36:[2,63],39:[2,63],40:[2,63],42:[2,63],45:[2,63],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[2,63],61:[2,63],62:[2,63],63:[2,63],64:[2,63],65:[2,63],66:[2,63],69:[2,63],70:[1,58]},{8:[2,64],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[2,64],33:[2,64],35:[1,56],36:[2,64],39:[2,64],40:[2,64],42:[2,64],45:[2,64],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[2,64],61:[2,64],62:[2,64],63:[2,64],64:[2,64],65:[2,64],66:[2,64],69:[2,64],70:[1,58]},{8:[2,65],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],36:[2,65],39:[2,65],40:[2,65],42:[2,65],45:[2,65],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[2,65],66:[1,55],69:[2,65],70:[1,58]},{8:[2,66],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],36:[2,66],39:[2,66],40:[2,66],42:[2,66],45:[2,66],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[2,66],66:[2,66],69:[2,66],70:[1,58]},{18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],36:[1,120],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],39:[1,121],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{8:[2,75],18:[2,75],19:[2,75],20:[2,75],21:[2,75],22:[2,75],23:[2,75],24:[2,75],32:[2,75],33:[2,75],35:[2,75],36:[2,75],39:[2,75],40:[2,75],42:[2,75],44:[1,122],45:[2,75],55:[2,75],56:[2,75],57:[2,75],58:[2,75],59:[2,75],60:[2,75],61:[2,75],62:[2,75],63:[2,75],64:[2,75],65:[2,75],66:[2,75],69:[2,75],70:[2,75]},{8:[2,13],18:[2,13],19:[2,13],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[2,13],33:[2,13],35:[1,56],36:[2,13],39:[2,13],40:[2,13],42:[2,13],45:[2,13],55:[2,13],56:[2,13],57:[2,13],58:[2,13],59:[2,13],60:[2,13],61:[2,13],62:[2,13],63:[2,13],64:[2,13],65:[2,13],66:[2,13],69:[2,13],70:[1,58]},{8:[2,14],18:[2,14],19:[2,14],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[2,14],33:[2,14],35:[1,56],36:[2,14],39:[2,14],40:[2,14],42:[2,14],45:[2,14],55:[2,14],56:[2,14],57:[2,14],58:[2,14],59:[2,14],60:[2,14],61:[2,14],62:[2,14],63:[2,14],64:[2,14],65:[2,14],66:[2,14],69:[2,14],70:[1,58]},{8:[2,15],18:[2,15],19:[2,15],20:[2,15],21:[2,15],22:[2,15],23:[1,64],24:[1,65],32:[2,15],33:[2,15],35:[1,56],36:[2,15],39:[2,15],40:[2,15],42:[2,15],45:[2,15],55:[2,15],56:[2,15],57:[2,15],58:[2,15],59:[2,15],60:[2,15],61:[2,15],62:[2,15],63:[2,15],64:[2,15],65:[2,15],66:[2,15],69:[2,15],70:[1,58]},{8:[2,16],18:[2,16],19:[2,16],20:[2,16],21:[2,16],22:[2,16],23:[1,64],24:[1,65],32:[2,16],33:[2,16],35:[1,56],36:[2,16],39:[2,16],40:[2,16],42:[2,16],45:[2,16],55:[2,16],56:[2,16],57:[2,16],58:[2,16],59:[2,16],60:[2,16],61:[2,16],62:[2,16],63:[2,16],64:[2,16],65:[2,16],66:[2,16],69:[2,16],70:[1,58]},{8:[2,17],18:[2,17],19:[2,17],20:[2,17],21:[2,17],22:[2,17],23:[1,64],24:[1,65],32:[2,17],33:[2,17],35:[1,56],36:[2,17],39:[2,17],40:[2,17],42:[2,17],45:[2,17],55:[2,17],56:[2,17],57:[2,17],58:[2,17],59:[2,17],60:[2,17],61:[2,17],62:[2,17],63:[2,17],64:[2,17],65:[2,17],66:[2,17],69:[2,17],70:[1,58]},{18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],45:[1,123],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],45:[1,124],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],45:[1,125],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{44:[1,126]},{6:34,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:25,30:[1,32],35:[1,23],37:[1,19],41:[1,20],43:[1,13],44:[1,22],46:[1,14],47:[1,15],48:[1,17],50:[1,18],51:[1,16],54:[1,127],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{5:[2,52],30:[2,52],35:[2,52],37:[2,52],41:[2,52],43:[2,52],44:[2,52],46:[2,52],47:[2,52],48:[2,52],50:[2,52],51:[2,52],52:[2,52],54:[2,52],56:[2,52],67:[2,52],71:[2,52],72:[2,52],73:[2,52],74:[2,52],75:[2,52],76:[2,52]},{25:128,26:[1,129],27:[1,130],28:[1,131],29:[1,132],30:[1,133],31:[1,134]},{16:135,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{30:[1,136]},{25:137,26:[1,129],27:[1,130],28:[1,131],29:[1,132],30:[1,133],31:[1,134]},{16:138,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{35:[1,140],40:[1,139]},{36:[1,141]},{8:[2,68],18:[2,68],19:[2,68],20:[2,68],21:[2,68],22:[2,68],23:[2,68],24:[2,68],32:[2,68],33:[2,68],35:[2,68],36:[2,68],39:[2,68],40:[2,68],42:[2,68],45:[2,68],55:[2,68],56:[2,68],57:[2,68],58:[2,68],59:[2,68],60:[2,68],61:[2,68],62:[2,68],63:[2,68],64:[2,68],65:[2,68],66:[2,68],69:[2,68],70:[2,68]},{8:[2,70],18:[2,70],19:[2,70],20:[2,70],21:[2,70],22:[2,70],23:[2,70],24:[2,70],32:[2,70],33:[2,70],35:[2,70],36:[2,70],39:[2,70],40:[2,70],42:[2,70],45:[2,70],55:[2,70],56:[2,70],57:[2,70],58:[2,70],59:[2,70],60:[2,70],61:[2,70],62:[2,70],63:[2,70],64:[2,70],65:[2,70],66:[2,70],69:[2,70],70:[2,70]},{16:142,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{8:[2,71],18:[2,71],19:[2,71],20:[2,71],21:[2,71],22:[2,71],23:[2,71],24:[2,71],32:[2,71],33:[2,71],35:[2,71],36:[2,71],39:[2,71],40:[2,71],42:[2,71],45:[2,71],55:[2,71],56:[2,71],57:[2,71],58:[2,71],59:[2,71],60:[2,71],61:[2,71],62:[2,71],63:[2,71],64:[2,71],65:[2,71],66:[2,71],69:[2,71],70:[2,71]},{16:143,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:79,17:25,30:[1,32],35:[1,23],44:[1,22],45:[1,144],56:[1,24],67:[1,21],68:145,71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{8:[2,41]},{6:71,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:25,30:[1,32],35:[1,23],37:[1,19],41:[1,20],43:[1,13],44:[1,22],46:[1,14],47:[1,15],48:[1,17],49:146,50:[1,18],51:[1,16],53:[1,70],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{6:71,7:4,9:5,10:6,11:7,12:8,13:9,14:10,15:11,16:12,17:25,30:[1,32],35:[1,23],37:[1,19],41:[1,20],43:[1,13],44:[1,22],46:[1,14],47:[1,15],48:[1,17],49:147,50:[1,18],51:[1,16],53:[1,70],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{16:148,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{5:[2,50],30:[2,50],35:[2,50],37:[2,50],41:[2,50],43:[2,50],44:[2,50],46:[2,50],47:[2,50],48:[2,50],50:[2,50],51:[2,50],52:[2,50],54:[2,50],56:[2,50],67:[2,50],71:[2,50],72:[2,50],73:[2,50],74:[2,50],75:[2,50],76:[2,50]},{8:[2,29],34:150,35:[1,116],40:[1,149]},{8:[2,20],33:[2,20],35:[2,20],40:[2,20]},{8:[2,21],33:[2,21],35:[2,21],40:[2,21]},{8:[2,22],33:[2,22],35:[2,22],40:[2,22]},{8:[2,23],33:[2,23],35:[2,23],40:[2,23]},{8:[2,24],33:[2,24],35:[2,24],40:[2,24]},{32:[1,151]},{8:[2,30],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{8:[2,38],39:[2,38],40:[2,38],42:[2,38]},{34:153,35:[1,116],40:[1,152]},{8:[2,33],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{16:154,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{36:[1,155]},{8:[2,27],35:[2,27],40:[2,27]},{18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],36:[2,85],42:[2,85],45:[2,85],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{8:[2,72],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],36:[2,72],39:[2,72],40:[2,72],42:[2,72],45:[2,72],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{8:[2,73],18:[2,73],19:[2,73],20:[2,73],21:[2,73],22:[2,73],23:[2,73],24:[2,73],32:[2,73],33:[2,73],35:[2,73],36:[2,73],39:[2,73],40:[2,73],42:[2,73],45:[2,73],55:[2,73],56:[2,73],57:[2,73],58:[2,73],59:[2,73],60:[2,73],61:[2,73],62:[2,73],63:[2,73],64:[2,73],65:[2,73],66:[2,73],69:[2,73],70:[2,73]},{42:[1,119],45:[1,156]},{5:[2,47],30:[2,47],35:[2,47],37:[2,47],41:[2,47],43:[2,47],44:[2,47],46:[2,47],47:[2,47],48:[2,47],50:[2,47],51:[2,47],52:[1,157],54:[2,47],56:[2,47],67:[2,47],71:[2,47],72:[2,47],73:[2,47],74:[2,47],75:[2,47],76:[2,47]},{5:[2,44],30:[2,44],35:[2,44],37:[2,44],41:[2,44],43:[2,44],44:[2,44],46:[2,44],47:[2,44],48:[2,44],50:[2,44],51:[2,44],52:[2,44],54:[2,44],56:[2,44],67:[2,44],71:[2,44],72:[2,44],73:[2,44],74:[2,44],75:[2,44],76:[2,44]},{18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],45:[1,158],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{16:159,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{8:[2,35],35:[1,140],40:[1,160]},{25:161,26:[1,129],27:[1,130],28:[1,131],29:[1,132],30:[1,133],31:[1,134]},{16:162,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{35:[1,140],40:[1,163]},{8:[2,37],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{8:[2,26],35:[2,26],40:[2,26]},{8:[2,74],18:[2,74],19:[2,74],20:[2,74],21:[2,74],22:[2,74],23:[2,74],24:[2,74],32:[2,74],33:[2,74],35:[2,74],36:[2,74],39:[2,74],40:[2,74],42:[2,74],45:[2,74],55:[2,74],56:[2,74],57:[2,74],58:[2,74],59:[2,74],60:[2,74],61:[2,74],62:[2,74],63:[2,74],64:[2,74],65:[2,74],66:[2,74],69:[2,74],70:[2,74]},{6:71,7:4,9:5,10:6,11:165,12:8,13:9,14:10,15:11,16:12,17:25,30:[1,32],35:[1,23],37:[1,19],41:[1,20],43:[1,13],44:[1,22],46:[1,14],47:[1,15],48:[1,17],49:164,50:[1,18],51:[1,16],53:[1,70],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{5:[2,45],8:[1,166],30:[2,45],35:[2,45],37:[2,45],41:[2,45],43:[2,45],44:[2,45],46:[2,45],47:[2,45],48:[2,45],50:[2,45],51:[2,45],52:[2,45],54:[2,45],56:[2,45],67:[2,45],71:[2,45],72:[2,45],73:[2,45],74:[2,45],75:[2,45],76:[2,45]},{8:[2,28],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{16:167,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{33:[1,168]},{8:[2,32],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{16:169,17:25,30:[1,32],35:[1,23],44:[1,22],56:[1,24],67:[1,21],71:[1,26],72:[1,27],73:[1,28],74:[1,29],75:[1,30],76:[1,31]},{5:[2,48],30:[2,48],35:[2,48],37:[2,48],41:[2,48],43:[2,48],44:[2,48],46:[2,48],47:[2,48],48:[2,48],50:[2,48],51:[2,48],52:[2,48],54:[2,48],56:[2,48],67:[2,48],71:[2,48],72:[2,48],73:[2,48],74:[2,48],75:[2,48],76:[2,48]},{5:[2,49],30:[2,49],35:[2,49],37:[2,49],41:[2,49],43:[2,49],44:[2,49],46:[2,49],47:[2,49],48:[2,49],50:[2,49],51:[2,49],52:[2,49],54:[2,49],56:[2,49],67:[2,49],71:[2,49],72:[2,49],73:[2,49],74:[2,49],75:[2,49],76:[2,49]},{5:[2,46],30:[2,46],35:[2,46],37:[2,46],41:[2,46],43:[2,46],44:[2,46],46:[2,46],47:[2,46],48:[2,46],50:[2,46],51:[2,46],52:[2,46],54:[2,46],56:[2,46],67:[2,46],71:[2,46],72:[2,46],73:[2,46],74:[2,46],75:[2,46],76:[2,46]},{8:[2,34],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]},{8:[2,25],33:[2,25],35:[2,25],40:[2,25]},{8:[2,36],18:[1,59],19:[1,60],20:[1,61],21:[1,62],22:[1,63],23:[1,64],24:[1,65],32:[1,53],33:[1,50],35:[1,56],55:[1,42],56:[1,43],57:[1,44],58:[1,45],59:[1,46],60:[1,47],61:[1,48],62:[1,49],63:[1,51],64:[1,52],65:[1,54],66:[1,55],69:[1,57],70:[1,58]}],
        defaultActions: {14:[2,42],15:[2,43],33:[2,1],123:[2,41]},
        parseError: function parseError(str,hash){if(hash.recoverable){this.trace(str)}else{throw new Error(str)}},
        parse: function parse(input) {
            var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
            var args = lstack.slice.call(arguments, 1);
            this.lexer.setInput(input);
            this.lexer.yy = this.yy;
            this.yy.lexer = this.lexer;
            this.yy.parser = this;
            if (typeof this.lexer.yylloc == 'undefined') {
                this.lexer.yylloc = {};
            }
            var yyloc = this.lexer.yylloc;
            lstack.push(yyloc);
            var ranges = this.lexer.options && this.lexer.options.ranges;
            if (typeof this.yy.parseError === 'function') {
                this.parseError = this.yy.parseError;
            } else {
                this.parseError = Object.getPrototypeOf(this).parseError;
            }
            function popStack(n) {
                stack.length = stack.length - 2 * n;
                vstack.length = vstack.length - n;
                lstack.length = lstack.length - n;
            }
            function lex() {
                var token;
                token = self.lexer.lex() || EOF;
                if (typeof token !== 'number') {
                    token = self.symbols_[token] || token;
                }
                return token;
            }
            var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
            while (true) {
                state = stack[stack.length - 1];
                if (this.defaultActions[state]) {
                    action = this.defaultActions[state];
                } else {
                    if (symbol === null || typeof symbol == 'undefined') {
                        symbol = lex();
                    }
                    action = table[state] && table[state][symbol];
                }
                if (typeof action === 'undefined' || !action.length || !action[0]) {
                    var errStr = '';
                    expected = [];
                    for (p in table[state]) {
                        if (this.terminals_[p] && p > TERROR) {
                            expected.push('\'' + this.terminals_[p] + '\'');
                        }
                    }
                    if (this.lexer.showPosition) {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                    } else {
                        errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                    }
                    this.parseError(errStr, {
                        text: this.lexer.match,
                        token: this.terminals_[symbol] || symbol,
                        line: this.lexer.yylineno,
                        loc: yyloc,
                        expected: expected
                    });
                }
                if (action[0] instanceof Array && action.length > 1) {
                    throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
                }
                switch (action[0]) {
                    case 1:
                        stack.push(symbol);
                        vstack.push(this.lexer.yytext);
                        lstack.push(this.lexer.yylloc);
                        stack.push(action[1]);
                        symbol = null;
                        if (!preErrorSymbol) {
                            yyleng = this.lexer.yyleng;
                            yytext = this.lexer.yytext;
                            yylineno = this.lexer.yylineno;
                            yyloc = this.lexer.yylloc;
                            if (recovering > 0) {
                                recovering--;
                            }
                        } else {
                            symbol = preErrorSymbol;
                            preErrorSymbol = null;
                        }
                        break;
                    case 2:
                        len = this.productions_[action[1]][1];
                        yyval.$ = vstack[vstack.length - len];
                        yyval._$ = {
                            first_line: lstack[lstack.length - (len || 1)].first_line,
                            last_line: lstack[lstack.length - 1].last_line,
                            first_column: lstack[lstack.length - (len || 1)].first_column,
                            last_column: lstack[lstack.length - 1].last_column
                        };
                        if (ranges) {
                            yyval._$.range = [
                                lstack[lstack.length - (len || 1)].range[0],
                                lstack[lstack.length - 1].range[1]
                            ];
                        }
                        r = this.performAction.apply(yyval, [
                            yytext,
                            yyleng,
                            yylineno,
                            this.yy,
                            action[1],
                            vstack,
                            lstack
                        ].concat(args));
                        if (typeof r !== 'undefined') {
                            return r;
                        }
                        if (len) {
                            stack = stack.slice(0, -1 * len * 2);
                            vstack = vstack.slice(0, -1 * len);
                            lstack = lstack.slice(0, -1 * len);
                        }
                        stack.push(this.productions_[action[1]][0]);
                        vstack.push(yyval.$);
                        lstack.push(yyval._$);
                        newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
                        stack.push(newState);
                        break;
                    case 3:
                        return true;
                }
            }
            return true;
        }};
    /* generated by jison-lex 0.2.1 */
    var lexer = (function(){
        var lexer = {

            EOF:1,

            parseError:function parseError(str,hash){if(this.yy.parser){this.yy.parser.parseError(str,hash)}else{throw new Error(str)}},

// resets the lexer, sets new input
            setInput:function(input){this._input=input;this._more=this._backtrack=this.done=false;this.yylineno=this.yyleng=0;this.yytext=this.matched=this.match="";this.conditionStack=["INITIAL"];this.yylloc={first_line:1,first_column:0,last_line:1,last_column:0};if(this.options.ranges){this.yylloc.range=[0,0]}this.offset=0;return this},

// consumes and returns one char from the input
            input:function(){var ch=this._input[0];this.yytext+=ch;this.yyleng++;this.offset++;this.match+=ch;this.matched+=ch;var lines=ch.match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno++;this.yylloc.last_line++}else{this.yylloc.last_column++}if(this.options.ranges){this.yylloc.range[1]++}this._input=this._input.slice(1);return ch},

// unshifts one char (or a string) into the input
            unput:function(ch){var len=ch.length;var lines=ch.split(/(?:\r\n?|\n)/g);this._input=ch+this._input;this.yytext=this.yytext.substr(0,this.yytext.length-len-1);this.offset-=len;var oldLines=this.match.split(/(?:\r\n?|\n)/g);this.match=this.match.substr(0,this.match.length-1);this.matched=this.matched.substr(0,this.matched.length-1);if(lines.length-1){this.yylineno-=lines.length-1}var r=this.yylloc.range;this.yylloc={first_line:this.yylloc.first_line,last_line:this.yylineno+1,first_column:this.yylloc.first_column,last_column:lines?(lines.length===oldLines.length?this.yylloc.first_column:0)+oldLines[oldLines.length-lines.length].length-lines[0].length:this.yylloc.first_column-len};if(this.options.ranges){this.yylloc.range=[r[0],r[0]+this.yyleng-len]}this.yyleng=this.yytext.length;return this},

// When called from action, caches matched text and appends it on next action
            more:function(){this._more=true;return this},

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
            reject:function(){if(this.options.backtrack_lexer){this._backtrack=true}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}return this},

// retain first n characters of the match
            less:function(n){this.unput(this.match.slice(n))},

// displays already matched input, i.e. for error messages
            pastInput:function(){var past=this.matched.substr(0,this.matched.length-this.match.length);return(past.length>20?"...":"")+past.substr(-20).replace(/\n/g,"")},

// displays upcoming input, i.e. for error messages
            upcomingInput:function(){var next=this.match;if(next.length<20){next+=this._input.substr(0,20-next.length)}return(next.substr(0,20)+(next.length>20?"...":"")).replace(/\n/g,"")},

// displays the character position where the lexing error occurred, i.e. for error messages
            showPosition:function(){var pre=this.pastInput();var c=new Array(pre.length+1).join("-");return pre+this.upcomingInput()+"\n"+c+"^"},

// test the lexed token: return FALSE when not a match, otherwise return token
            test_match:function(match,indexed_rule){var token,lines,backup;if(this.options.backtrack_lexer){backup={yylineno:this.yylineno,yylloc:{first_line:this.yylloc.first_line,last_line:this.last_line,first_column:this.yylloc.first_column,last_column:this.yylloc.last_column},yytext:this.yytext,match:this.match,matches:this.matches,matched:this.matched,yyleng:this.yyleng,offset:this.offset,_more:this._more,_input:this._input,yy:this.yy,conditionStack:this.conditionStack.slice(0),done:this.done};if(this.options.ranges){backup.yylloc.range=this.yylloc.range.slice(0)}}lines=match[0].match(/(?:\r\n?|\n).*/g);if(lines){this.yylineno+=lines.length}this.yylloc={first_line:this.yylloc.last_line,last_line:this.yylineno+1,first_column:this.yylloc.last_column,last_column:lines?lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length:this.yylloc.last_column+match[0].length};this.yytext+=match[0];this.match+=match[0];this.matches=match;this.yyleng=this.yytext.length;if(this.options.ranges){this.yylloc.range=[this.offset,this.offset+=this.yyleng]}this._more=false;this._backtrack=false;this._input=this._input.slice(match[0].length);this.matched+=match[0];token=this.performAction.call(this,this.yy,this,indexed_rule,this.conditionStack[this.conditionStack.length-1]);if(this.done&&this._input){this.done=false}if(token){return token}else if(this._backtrack){for(var k in backup){this[k]=backup[k]}return false}return false},

// return next match in input
            next:function(){if(this.done){return this.EOF}if(!this._input){this.done=true}var token,match,tempMatch,index;if(!this._more){this.yytext="";this.match=""}var rules=this._currentRules();for(var i=0;i<rules.length;i++){tempMatch=this._input.match(this.rules[rules[i]]);if(tempMatch&&(!match||tempMatch[0].length>match[0].length)){match=tempMatch;index=i;if(this.options.backtrack_lexer){token=this.test_match(tempMatch,rules[i]);if(token!==false){return token}else if(this._backtrack){match=false;continue}else{return false}}else if(!this.options.flex){break}}}if(match){token=this.test_match(match,rules[index]);if(token!==false){return token}return false}if(this._input===""){return this.EOF}else{return this.parseError("Lexical error on line "+(this.yylineno+1)+". Unrecognized text.\n"+this.showPosition(),{text:"",token:null,line:this.yylineno})}},

// return next match that has a token
            lex:function lex(){var r=this.next();if(r){return r}else{return this.lex()}},

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
            begin:function begin(condition){this.conditionStack.push(condition)},

// pop the previously active lexer condition state off the condition stack
            popState:function popState(){var n=this.conditionStack.length-1;if(n>0){return this.conditionStack.pop()}else{return this.conditionStack[0]}},

// produce the lexer rule set which is active for the currently active lexer condition state
            _currentRules:function _currentRules(){if(this.conditionStack.length&&this.conditionStack[this.conditionStack.length-1]){return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules}else{return this.conditions["INITIAL"].rules}},

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
            topState:function topState(n){n=this.conditionStack.length-1-Math.abs(n||0);if(n>=0){return this.conditionStack[n]}else{return"INITIAL"}},

// alias for begin(condition)
            pushState:function pushState(condition){this.begin(condition)},

// return the number of states currently on the stack
            stateStackSize:function stateStackSize(){return this.conditionStack.length},
            options: {},
            performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START
            ) {

                var YYSTATE=YY_START;
                switch($avoiding_name_collisions) {
                    case 0:

                        this.begin('no joda man xD');

                        break;
                    case 1:

                        this.popState();

                        break;
                    case 2:/* skip comment content*/
                        break;
                    case 3:return 73;
                        break;
                    case 4:return 74;
                        break;
                    case 5:return 75;
                        break;
                    case 6:return 76;
                        break;
                    case 7:return 26;
                        break;
                    case 8:return 27;
                        break;
                    case 9:return 28;
                        break;
                    case 10:return 29;
                        break;
                    case 11:return 31;
                        break;
                    case 12:return 41;
                        break;
                    case 13:return 37;
                        break;
                    case 14:return 46;
                        break;
                    case 15:return 47;
                        break;
                    case 16:return 43;
                        break;
                    case 17:return 51;
                        break;
                    case 18:return 52;
                        break;
                    case 19:return 48;
                        break;
                    case 20:return 50;
                        break;
                    case 21:/* skip whitespace */
                        break;
                    case 22:return 71
                        break;
                    case 23:return 72;
                        break;
                    case 24:return 18
                        break;
                    case 25:return 19
                        break;
                    case 26:return 20
                        break;
                    case 27:return 21
                        break;
                    case 28:return 22
                        break;
                    case 29:return 23
                        break;
                    case 30:return 24
                        break;
                    case 31:return 57
                        break;
                    case 32:return 58
                        break;
                    case 33:return 56
                        break;
                    case 34:return 55
                        break;
                    case 35:return 60
                        break;
                    case 36:return 59
                        break;
                    case 37:return 44
                        break;
                    case 38:return 45
                        break;
                    case 39:return 8
                        break;
                    case 40:return 42
                        break;
                    case 41:return 39
                        break;
                    case 42:return 61
                        break;
                    case 43:return 62
                        break;
                    case 44:return 40
                        break;
                    case 45:return 63
                        break;
                    case 46:return 64
                        break;
                    case 47:return 33
                        break;
                    case 48:return 32
                        break;
                    case 49:return 65
                        break;
                    case 50:return 66
                        break;
                    case 51:return 67
                        break;
                    case 52:return 69
                        break;
                    case 53:return 70
                        break;
                    case 54:return 35
                        break;
                    case 55:return 36
                        break;
                    case 56:return 53
                        break;
                    case 57:return 54
                        break;
                    case 58:return 32
                        break;
                    case 59:return 33
                        break;
                    case 60:return 30;
                        break;
                    case 61:return 5
                        break;
                    case 62:return 'INVALID'
                        break;
                }
            },
            rules: [/^(?:\/\*)/,/^(?:\*\/)/,/^(?:.)/,/^(?:null\b)/,/^(?:undefined\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:number\b)/,/^(?:string\b)/,/^(?:boolean\b)/,/^(?:any\b)/,/^(?:array\b)/,/^(?:const\b)/,/^(?:let\b)/,/^(?:break\b)/,/^(?:continue\b)/,/^(?:console\.log\b)/,/^(?:if\b)/,/^(?:else\b)/,/^(?:while\b)/,/^(?:do\b)/,/^(?:\s+)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:(("(([^"\\^'\\]|((\\[btnfr"'\\])))+)?")|('(([^"\\^'\\]|((\\[btnfr"'\\])))+)?')))/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:\+\+)/,/^(?:--)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:%)/,/^(?:\()/,/^(?:\))/,/^(?:;)/,/^(?:,)/,/^(?::)/,/^(?:==)/,/^(?:!=)/,/^(?:=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:!)/,/^(?:\?)/,/^(?:\.)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:<)/,/^(?:>)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:$)/,/^(?:.)/],
            conditions: {"comment":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true},"INITIAL":{"rules":[0,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62],"inclusive":true}}
        };
        return lexer;
    })();
    parser.lexer = lexer;
    function Parser () {
        this.yy = {};
    }
    Parser.prototype = parser;parser.Parser = Parser;
    return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
    exports.parser = parser;
    exports.Parser = parser.Parser;
    exports.parse = function () { return parser.parse.apply(parser, arguments); };
    exports.main = function commonjsMain(args){if(!args[1]){console.log("Usage: "+args[0]+" FILE");process.exit(1)}var source=require("fs").readFileSync(require("path").normalize(args[1]),"utf8");return exports.parser.parse(source)};
    if (typeof module !== 'undefined' && require.main === module) {
        exports.main(process.argv.slice(1));
    }
}